import os
import sqlite3
import asyncio
from datetime import datetime, timezone, timedelta
from typing import List, Dict, Tuple
import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))  # –í–∞—à Telegram ID

# –¢–∏–ø—ã —Ä–µ–∞–∫—Ü–∏–π
REACTIONS = {
    "üëç": "like",
    "‚ù§Ô∏è": "love",
    "üòÇ": "laugh",
    "üòÆ": "wow",
    "üò¢": "sad",
    "üò°": "angry"
}


class NewsBot:
    def __init__(self):
        self.db_name = 'news_bot.db'
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                is_subscribed BOOLEAN DEFAULT FALSE,
                joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS news (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                content TEXT NOT NULL,
                message_id INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                sent_to_users BOOLEAN DEFAULT FALSE
            )
        ''')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—É news
        cursor.execute("PRAGMA table_info(news)")
        columns = [column[1] for column in cursor.fetchall()]

        if 'media_type' not in columns:
            cursor.execute('ALTER TABLE news ADD COLUMN media_type TEXT')
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü media_type")

        if 'media_id' not in columns:
            cursor.execute('ALTER TABLE news ADD COLUMN media_id TEXT')
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü media_id")

        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∞–∫—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS reactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                news_id INTEGER NOT NULL,
                reaction_type TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (news_id) REFERENCES news (id) ON DELETE CASCADE,
                UNIQUE(user_id, news_id)
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sent_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                news_id INTEGER NOT NULL,
                message_id INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (news_id) REFERENCES news (id) ON DELETE CASCADE,
                UNIQUE(user_id, news_id)
            )
        ''')

        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def add_user(self, user_id: int, username: str = None, first_name: str = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name)
            VALUES (?, ?, ?)
        ''', (user_id, username, first_name))

        conn.commit()
        conn.close()

    def subscribe_user(self, user_id: int):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            UPDATE users SET is_subscribed = TRUE WHERE user_id = ?
        ''', (user_id,))

        conn.commit()
        conn.close()

    def is_user_subscribed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT is_subscribed FROM users WHERE user_id = ?
        ''', (user_id,))

        result = cursor.fetchone()
        conn.close()

        return result and result[0]

    def get_subscribed_users(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT user_id FROM users WHERE is_subscribed = TRUE
        ''')

        users = [row[0] for row in cursor.fetchall()]
        conn.close()

        return users

    def add_news(self, content: str, media_type: str = None, media_id: str = None) -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            INSERT INTO news (content, media_type, media_id) VALUES (?, ?, ?)
        ''', (content, media_type, media_id))

        news_id = cursor.lastrowid
        conn.commit()
        conn.close()

        return news_id

    def get_all_news(self) -> List[tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, content, media_type, media_id, created_at FROM news 
            ORDER BY created_at ASC
        ''')

        news = cursor.fetchall()
        conn.close()

        return news

    def get_news_for_edit(self) -> List[tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, content, created_at FROM news ORDER BY created_at DESC
        ''')

        news = cursor.fetchall()
        conn.close()

        return news

    def update_news(self, news_id: int, new_content: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            UPDATE news SET content = ? WHERE id = ?
        ''', (new_content, news_id))

        success = cursor.rowcount > 0
        conn.commit()
        conn.close()

        return success

    def delete_news(self, news_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            DELETE FROM news WHERE id = ?
        ''', (news_id,))

        success = cursor.rowcount > 0
        conn.commit()
        conn.close()

        return success

    def add_reaction(self, user_id: int, news_id: int, reaction_type: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            INSERT OR REPLACE INTO reactions (user_id, news_id, reaction_type)
            VALUES (?, ?, ?)
        ''', (user_id, news_id, reaction_type))

        success = cursor.rowcount > 0
        conn.commit()
        conn.close()

        return success

    def remove_reaction(self, user_id: int, news_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            DELETE FROM reactions WHERE user_id = ? AND news_id = ?
        ''', (user_id, news_id))

        success = cursor.rowcount > 0
        conn.commit()
        conn.close()

        return success

    def get_reactions_for_news(self, news_id: int) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT reaction_type, COUNT(*) FROM reactions 
            WHERE news_id = ? 
            GROUP BY reaction_type
        ''', (news_id,))

        reactions_count = dict(cursor.fetchall())
        conn.close()

        return reactions_count

    def get_user_reaction(self, user_id: int, news_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT reaction_type FROM reactions 
            WHERE user_id = ? AND news_id = ?
        ''', (user_id, news_id))

        result = cursor.fetchone()
        conn.close()

        return result[0] if result else None

    def save_sent_message(self, user_id: int, news_id: int, message_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            INSERT OR REPLACE INTO sent_messages (user_id, news_id, message_id)
            VALUES (?, ?, ?)
        ''', (user_id, news_id, message_id))

        conn.commit()
        conn.close()

    def get_sent_messages_for_news(self, news_id: int) -> List[Tuple[int, int]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT user_id, message_id FROM sent_messages 
            WHERE news_id = ?
        ''', (news_id,))

        messages = cursor.fetchall()
        conn.close()

        return messages

    def remove_sent_message(self, user_id: int, news_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            DELETE FROM sent_messages 
            WHERE user_id = ? AND news_id = ?
        ''', (user_id, news_id))

        conn.commit()
        conn.close()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
news_bot = NewsBot()


def determine_post_size(content: str, media_type: str = None) -> str:
    """üìè –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å—Ç–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π"""

    # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_length = len(content) if content else 0

    if media_type:
        # –ü–æ—Å—Ç—ã —Å –º–µ–¥–∏–∞ –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞—é—Ç –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞
        if content_length < 50:
            return "small"  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç + –º–µ–¥–∏–∞ = –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ—Å—Ç
        elif content_length < 200:
            return "normal"  # –°—Ä–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç + –º–µ–¥–∏–∞ = –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
        else:
            return "large"  # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç + –º–µ–¥–∏–∞ = –±–æ–ª—å—à–æ–π –ø–æ—Å—Ç
    else:
        # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        if content_length < 100:
            return "small"  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç = –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ—Å—Ç
        elif content_length < 400:
            return "normal"  # –°—Ä–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç = –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
        else:
            return "large"  # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç = –±–æ–ª—å—à–æ–π –ø–æ—Å—Ç


def determine_button_format(post_size: str, total_reactions: int) -> str:
    """üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    # –ë–∞–∑–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    if post_size == "small":
        if total_reactions > 100:
            return "minimal"      # –¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö, —ç–º–æ–¥–∑–∏+—á–∏—Å–ª–æ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        elif total_reactions > 20:
            return "compact"      # –≠–º–æ–¥–∑–∏ + –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞
        else:
            return "standard"     # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            
    elif post_size == "large":
        if total_reactions > 200:
            return "compact"      # –î–∞–∂–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –º–Ω–æ–≥–∏—Ö —Ä–µ–∞–∫—Ü–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º
        else:
            return "standard"     # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    else:  # normal
        if total_reactions > 150:
            return "compact"
        else:
            return "standard"


def format_reaction_button_text(emoji: str, count: int, is_user_reaction: bool, format_type: str) -> str:
    """üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
    def compact_number(num):
        if num >= 1000000:
            return f"{num // 1000000}M"
        elif num >= 1000:
            return f"{num // 1000}K"
        return str(num)
    
    compact_count = compact_number(count) if count > 999 else str(count)
    
    if format_type == "minimal":
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏–ª–∏ —ç–º–æ–¥–∑–∏+—á–∏—Å–ª–æ
        if is_user_reaction:
            return f"‚Ä¢{emoji}‚Ä¢" if count <= 1 else f"‚Ä¢{emoji}{compact_count}‚Ä¢"
        else:
            return emoji if count == 0 else f"{emoji}{compact_count}"
            
    elif format_type == "compact":
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —á–∏—Å–µ–ª
        if is_user_reaction:
            return f"{emoji}‚òÖ" if count <= 1 else f"{emoji}{compact_count}‚òÖ"
        else:
            return emoji if count == 0 else f"{emoji}{compact_count}"
            
    else:  # standard
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø–æ–ª–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if is_user_reaction:
            return f"{emoji}‚òÖ" if count <= 1 else f"{emoji} {count}‚òÖ"
        else:
            return emoji if count == 0 else f"{emoji} {count}"


def create_universal_reactions_keyboard(news_id: int, user_reaction: str = None, post_size: str = "normal") -> InlineKeyboardMarkup:
    """üåç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∞–∫—Ü–∏–π - –í–°–ï–ì–î–ê –æ–¥–∏–Ω —Ä—è–¥, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä"""
    
    reactions_count = news_bot.get_reactions_for_news(news_id)
    total_reactions = sum(reactions_count.values())
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫
    button_format = determine_button_format(post_size, total_reactions)
    
    keyboard_row = []
    
    for emoji, reaction_type in REACTIONS.items():
        count = reactions_count.get(reaction_type, 0)
        is_user_reaction = (user_reaction == reaction_type)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = format_reaction_button_text(
            emoji, count, is_user_reaction, button_format
        )
        
        keyboard_row.append(InlineKeyboardButton(
            button_text,
            callback_data=f"reaction_{news_id}_{reaction_type}"
        ))
    
    # –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –û–î–ò–ù —Ä—è–¥ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return InlineKeyboardMarkup([keyboard_row])


async def send_news_with_reactions(context: ContextTypes.DEFAULT_TYPE, chat_id: int, news_data: tuple,
                                   user_id: int = None, save_message_id: bool = False):
    """üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏"""
    news_id, content, media_type, media_id, created_at = news_data

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)
    if isinstance(created_at, str):
        date_obj = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
        if date_obj.tzinfo is None:
            moscow_tz = timezone(timedelta(hours=3))
            date_obj = date_obj.replace(tzinfo=moscow_tz)
        formatted_date = date_obj.strftime("%d.%m.%Y –≤ %H:%M")
    else:
        formatted_date = created_at.strftime("%d.%m.%Y –≤ %H:%M")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_reaction = news_bot.get_user_reaction(user_id, news_id) if user_id else None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å—Ç–∞
    post_size = determine_post_size(content, media_type)

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω —Ä—è–¥)
    reply_markup = create_universal_reactions_keyboard(news_id, user_reaction, post_size)

    message_text = f"üìÖ {formatted_date}\n\n{content}" if content else f"üìÖ {formatted_date}"

    try:
        sent_message = None

        if media_type and media_id:
            if media_type == "photo":
                sent_message = await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=media_id,
                    caption=message_text,
                    reply_markup=reply_markup
                )
            elif media_type == "video":
                sent_message = await context.bot.send_video(
                    chat_id=chat_id,
                    video=media_id,
                    caption=message_text,
                    reply_markup=reply_markup
                )
            elif media_type == "document":
                sent_message = await context.bot.send_document(
                    chat_id=chat_id,
                    document=media_id,
                    caption=message_text,
                    reply_markup=reply_markup
                )
        else:
            sent_message = await context.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                reply_markup=reply_markup
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if save_message_id and sent_message and user_id:
            news_bot.save_sent_message(user_id, news_id, sent_message.message_id)

        return sent_message

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        return None


async def update_all_reactions_for_news(context: ContextTypes.DEFAULT_TYPE, news_id: int):
    """üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∞–∫—Ü–∏–π –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏"""

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å—Ç–∞
    conn = sqlite3.connect(news_bot.db_name)
    cursor = conn.cursor()
    cursor.execute('SELECT content, media_type FROM news WHERE id = ?', (news_id,))
    news_info = cursor.fetchone()
    conn.close()

    if not news_info:
        logger.error(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π")
        return

    content, media_type = news_info
    post_size = determine_post_size(content, media_type)

    sent_messages = news_bot.get_sent_messages_for_news(news_id)

    updated_count = 0
    failed_count = 0

    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id} (—Ä–∞–∑–º–µ—Ä: {post_size}). –°–æ–æ–±—â–µ–Ω–∏–π: {len(sent_messages)}")

    for user_id, message_id in sent_messages:
        try:
            user_reaction = news_bot.get_user_reaction(user_id, news_id)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            new_keyboard = create_universal_reactions_keyboard(news_id, user_reaction, post_size)

            await context.bot.edit_message_reply_markup(
                chat_id=user_id,
                message_id=message_id,
                reply_markup=new_keyboard
            )
            updated_count += 1

            await asyncio.sleep(0.05)

        except Exception as e:
            failed_count += 1
            error_msg = str(e).lower()

            if "message to edit not found" in error_msg or "message is not modified" in error_msg:
                news_bot.remove_sent_message(user_id, news_id)
                logger.info(f"üìù –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")

    logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∞–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}, –æ—à–∏–±–æ–∫ {failed_count}")


async def update_all_messages_for_news(context: ContextTypes.DEFAULT_TYPE, news_id: int, new_content: str):
    """üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏"""

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ—Å—Ç–∏
    conn = sqlite3.connect(news_bot.db_name)
    cursor = conn.cursor()

    cursor.execute('''
        SELECT content, media_type, media_id, created_at FROM news WHERE id = ?
    ''', (news_id,))

    news_data = cursor.fetchone()
    conn.close()

    if not news_data:
        logger.error(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return

    content, media_type, media_id, created_at = news_data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    post_size = determine_post_size(new_content, media_type)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (UTC+3)
    if isinstance(created_at, str):
        date_obj = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
        if date_obj.tzinfo is None:
            moscow_tz = timezone(timedelta(hours=3))
            date_obj = date_obj.replace(tzinfo=moscow_tz)
        formatted_date = date_obj.strftime("%d.%m.%Y –≤ %H:%M")
    else:
        formatted_date = created_at.strftime("%d.%m.%Y –≤ %H:%M")

    sent_messages = news_bot.get_sent_messages_for_news(news_id)

    updated_count = 0
    failed_count = 0

    logger.info(f"üìù –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id} (—Ä–∞–∑–º–µ—Ä: {post_size}). –°–æ–æ–±—â–µ–Ω–∏–π: {len(sent_messages)}")

    for user_id, message_id in sent_messages:
        try:
            user_reaction = news_bot.get_user_reaction(user_id, news_id)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            new_keyboard = create_universal_reactions_keyboard(news_id, user_reaction, post_size)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            message_text = f"üìÖ {formatted_date}\n\n{new_content}" if new_content else f"üìÖ {formatted_date}"

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if media_type:
                await context.bot.edit_message_caption(
                    chat_id=user_id,
                    message_id=message_id,
                    caption=message_text,
                    reply_markup=new_keyboard
                )
            else:
                await context.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=message_id,
                    text=message_text,
                    reply_markup=new_keyboard
                )

            updated_count += 1
            await asyncio.sleep(0.05)

        except Exception as e:
            failed_count += 1
            error_msg = str(e).lower()

            if "message to edit not found" in error_msg or "message is not modified" in error_msg:
                news_bot.remove_sent_message(user_id, news_id)
                logger.info(f"üìù –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")

    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}, –æ—à–∏–±–æ–∫ {failed_count}")
    return updated_count, failed_count


async def delete_all_messages_for_news(context: ContextTypes.DEFAULT_TYPE, news_id: int):
    """üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    sent_messages = news_bot.get_sent_messages_for_news(news_id)

    if not sent_messages:
        logger.info(f"üóë –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
        return 0, 0

    deleted_count = 0
    failed_count = 0

    logger.info(f"üóë –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}. –°–æ–æ–±—â–µ–Ω–∏–π: {len(sent_messages)}")

    for user_id, message_id in sent_messages:
        try:
            await context.bot.delete_message(
                chat_id=user_id,
                message_id=message_id
            )
            deleted_count += 1
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            await asyncio.sleep(0.03)

        except Exception as e:
            failed_count += 1
            error_msg = str(e).lower()

            if "message to delete not found" in error_msg:
                logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
            elif "chat not found" in error_msg:
                logger.info(f"üìù –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            elif "bot was blocked" in error_msg:
                logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(news_bot.db_name)
    cursor = conn.cursor()

    cursor.execute('DELETE FROM sent_messages WHERE news_id = ?', (news_id,))
    deleted_messages_records = cursor.rowcount

    cursor.execute('DELETE FROM reactions WHERE news_id = ?', (news_id,))
    deleted_reactions_records = cursor.rowcount

    conn.commit()
    conn.close()

    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}:")
    logger.info(f"   üì§ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}")
    logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_count}")
    logger.info(f"   üóÇ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö: {deleted_messages_records}")
    logger.info(f"   üé≠ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ —Ä–µ–∞–∫—Ü–∏—è—Ö: {deleted_reactions_records}")

    return deleted_count, failed_count


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üè† –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user

    news_bot.add_user(user.id, user.username, user.first_name)

    if news_bot.is_user_subscribed(user.id):
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üëã\n\n"
            "–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π /news –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."
        )
        return

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç –ö–∏—Ä–æ–≤—Å–∫–æ–≥–æ –ó–∞–≤–æ–¥–∞! –ó–¥–µ—Å—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∏ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏. "
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!"
    )

    keyboard = [[InlineKeyboardButton("üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="subscribe")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(welcome_text, reply_markup=reply_markup)


async def subscribe_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    news_bot.subscribe_user(user_id)

    await query.edit_message_text(
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ö–∏—Ä–æ–≤—Å–∫–æ–≥–æ –ó–∞–≤–æ–¥–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –Ω–∞—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. "
        "–ù–∏–∂–µ –≤—Å–µ –Ω–∞—à–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:"
    )

    news_list = news_bot.get_all_news()
    if news_list:
        await asyncio.sleep(1)

        for news_data in news_list:
            await send_news_with_reactions(context, query.message.chat_id, news_data, user_id, save_message_id=True)
            await asyncio.sleep(0.3)


async def reaction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üé≠ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"""
    query = update.callback_query

    user_id = query.from_user.id

    try:
        _, news_id, reaction_type = query.data.split('_', 2)
        news_id = int(news_id)
    except (ValueError, IndexError):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏")
        return

    if not news_bot.is_user_subscribed(user_id):
        await query.answer("‚ùå –î–ª—è —Ä–µ–∞–∫—Ü–∏–π –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏!")
        return

    current_reaction = news_bot.get_user_reaction(user_id, news_id)

    if current_reaction == reaction_type:
        news_bot.remove_reaction(user_id, news_id)
        await query.answer()
    else:
        news_bot.add_reaction(user_id, news_id, reaction_type)
        await query.answer()

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
    await update_all_reactions_for_news(context, news_id)


async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üì∞ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    user_id = update.effective_user.id

    if not news_bot.is_user_subscribed(user_id):
        await update.message.reply_text(
            "‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è."
        )
        return

    news_list = news_bot.get_all_news()

    if not news_list:
        await update.message.reply_text("üì∞ –ü–æ–∫–∞ —á—Ç–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
        return

    for news_data in news_list:
        await send_news_with_reactions(context, update.message.chat_id, news_data, user_id, save_message_id=True)
        await asyncio.sleep(0.3)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‚ùì –ü–æ–º–æ—â—å"""
    user_id = update.effective_user.id

    if user_id == ADMIN_ID:
        help_text = (
            "üëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            "üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "üìù /edit_list - —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚úèÔ∏è /edit ID —Ç–µ–∫—Å—Ç - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)\n"
            "üóë /delete ID - —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚ùì /help - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:\n"
            "‚Ä¢ –õ—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑\n"
            "‚Ä¢ –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–æ–¥–ø–∏—Å—å—é\n\n"
            "üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n"
            "‚Ä¢ –†–µ–∞–∫—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n"
            "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —É–¥–∞–ª—è–µ—Ç –∏—Ö —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n"
            "‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–æ–¥–∏–Ω —Ä—è–¥)"
        )
    else:
        help_text = (
            "üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üè† /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞\n"
            "üì∞ /news - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
            "1. –ù–∞–∂–º–∏ /start –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "2. –ü–æ–ª—É—á–∞–π –Ω–æ–≤—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            "3. –°—Ç–∞–≤—å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "4. –ò—Å–ø–æ–ª—å–∑—É–π /news –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–∞\n\n"
            "üîÑ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!"
        )

    await update.message.reply_text(help_text)


async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user_id = update.effective_user.id

    if user_id != ADMIN_ID:
        return

    conn = sqlite3.connect(news_bot.db_name)
    cursor = conn.cursor()

    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(*) FROM users WHERE is_subscribed = TRUE')
    subscribers = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(*) FROM news')
    total_news = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(*) FROM reactions')
    total_reactions = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(*) FROM sent_messages')
    tracked_messages = cursor.fetchone()[0]

    cursor.execute('''
        SELECT reaction_type, COUNT(*) as count 
        FROM reactions 
        GROUP BY reaction_type 
        ORDER BY count DESC 
        LIMIT 6
    ''')
    top_reactions = cursor.fetchall()

    conn.close()

    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers}\n"
        f"üì∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n"
        f"üé≠ –í—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π: {total_reactions}\n"
        f"üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {tracked_messages}"
    )

    if top_reactions:
        stats_text += "\n\nüèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏:\n"
        for reaction_type, count in top_reactions:
            emoji = [emoji for emoji, rtype in REACTIONS.items() if rtype == reaction_type][0]
            stats_text += f"   {emoji} {count}\n"

    await update.message.reply_text(stats_text)


async def admin_edit_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üìù –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id

    if user_id != ADMIN_ID:
        return

    news_list = news_bot.get_news_for_edit()

    if not news_list:
        await update.message.reply_text("üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "üìù –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"

    for news_id, content, created_at in news_list:
        preview = content[:50] + "..." if len(content) > 50 else content

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)
        if isinstance(created_at, str):
            date_obj = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            if date_obj.tzinfo is None:
                moscow_tz = timezone(timedelta(hours=3))
                date_obj = date_obj.replace(tzinfo=moscow_tz)
            formatted_date = date_obj.strftime("%d.%m.%Y")
        else:
            formatted_date = created_at.strftime("%d.%m.%Y")

        reactions_count = news_bot.get_reactions_for_news(news_id)
        total_reactions = sum(reactions_count.values())

        response += f"üî∏ #{news_id} ({formatted_date}) üé≠{total_reactions}\n{preview}\n\n"

    response += "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π:\n"
    response += "üìù /edit 5 –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–æ–±–Ω–æ–≤–∏—Ç—Å—è —É –≤—Å–µ—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)\n"
    response += "üóë /delete 5 (—É–¥–∞–ª–∏—Ç—Å—è —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"

    await update.message.reply_text(response)


async def admin_edit_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = update.effective_user.id

    if user_id != ADMIN_ID:
        return

    try:
        parts = update.message.text.split(' ', 2)
        if len(parts) < 3:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π: /edit ID –Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç"
            )
            return

        news_id = int(parts[1])
        new_content = parts[2]

    except ValueError:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = news_bot.update_news(news_id, new_content)

    if success:
        await update.message.reply_text(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å #{news_id} –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...")

        # –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        updated_count, failed_count = await update_all_messages_for_news(context, news_id, new_content)

        await update.message.reply_text(
            f"üöÄ –ù–æ–≤–æ—Å—Ç—å #{news_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!\n"
            f"üì§ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {updated_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
            f"üåç –†–µ–∂–∏–º: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"
        )
    else:
        await update.message.reply_text(f"‚ùå –ù–æ–≤–æ—Å—Ç—å #{news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")


async def admin_delete_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üóë –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = update.effective_user.id

    if user_id != ADMIN_ID:
        return

    try:
        parts = update.message.text.split()
        if len(parts) != 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π: /delete ID\n"
                "–ü—Ä–∏–º–µ—Ä: /delete 5"
            )
            return

        news_id = int(parts[1])

    except ValueError:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–≤–æ—Å—Ç—å
    conn = sqlite3.connect(news_bot.db_name)
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM news WHERE id = ?', (news_id,))
    news_exists = cursor.fetchone()[0] > 0
    conn.close()

    if not news_exists:
        await update.message.reply_text(f"‚ùå –ù–æ–≤–æ—Å—Ç—å #{news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_msg = await update.message.reply_text(f"üóë –£–¥–∞–ª—è—é –Ω–æ–≤–æ—Å—Ç—å #{news_id} —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    # –ö–†–ò–¢–ò–ß–ù–û: –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
    deleted_count, failed_count = await delete_all_messages_for_news(context, news_id)

    # –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    success = news_bot.delete_news(news_id)

    if success:
        await progress_msg.edit_text(
            f"‚úÖ –ù–æ–≤–æ—Å—Ç—å #{news_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞!\n"
            f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
            f"üìä –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        )
    else:
        await progress_msg.edit_text(
            f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ #{news_id}\n"
            f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        )


async def admin_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏"""
    user_id = update.effective_user.id

    if user_id != ADMIN_ID:
        return

    message = update.message
    news_content = ""
    media_type = None
    media_id = None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if message.text:
        news_content = message.text
    elif message.photo:
        media_type = "photo"
        media_id = message.photo[-1].file_id
        news_content = message.caption or ""
    elif message.video:
        media_type = "video"
        media_id = message.video.file_id
        news_content = message.caption or ""
    elif message.document:
        media_type = "document"
        media_id = message.document.file_id
        news_content = message.caption or ""
    else:
        await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
    moscow_tz = timezone(timedelta(hours=3))
    moscow_time = datetime.now(moscow_tz)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
    news_id = news_bot.add_news(news_content, media_type, media_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
    conn = sqlite3.connect(news_bot.db_name)
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE news SET created_at = ? WHERE id = ?
    ''', (moscow_time.isoformat(), news_id))
    conn.commit()
    conn.close()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers = news_bot.get_subscribed_users()

    if not subscribers:
        await update.message.reply_text("‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å—Ç–∞
    post_size = determine_post_size(news_content, media_type)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    sent_count = 0
    formatted_time = moscow_time.strftime('%d.%m.%Y –≤ %H:%M')

    for subscriber_id in subscribers:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            reply_markup = create_universal_reactions_keyboard(news_id, None, post_size)

            sent_message = None
            message_text = f"üìÖ {formatted_time}\n\n{news_content}" if news_content else f"üìÖ {formatted_time}"

            if media_type:
                if media_type == "photo":
                    sent_message = await context.bot.send_photo(
                        chat_id=subscriber_id,
                        photo=media_id,
                        caption=message_text,
                        reply_markup=reply_markup
                    )
                elif media_type == "video":
                    sent_message = await context.bot.send_video(
                        chat_id=subscriber_id,
                        video=media_id,
                        caption=message_text,
                        reply_markup=reply_markup
                    )
                elif media_type == "document":
                    sent_message = await context.bot.send_document(
                        chat_id=subscriber_id,
                        document=media_id,
                        caption=message_text,
                        reply_markup=reply_markup
                    )
            else:
                sent_message = await context.bot.send_message(
                    chat_id=subscriber_id,
                    text=message_text,
                    reply_markup=reply_markup
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if sent_message:
                news_bot.save_sent_message(subscriber_id, news_id, sent_message.message_id)
                sent_count += 1

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscriber_id}: {e}")

        await asyncio.sleep(0.1)

    await update.message.reply_text(
        f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏!\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n"
        f"üìè –†–∞–∑–º–µ—Ä –ø–æ—Å—Ç–∞: {post_size}\n"
        f"üåç –†–µ–∂–∏–º: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–æ–¥–∏–Ω —Ä—è–¥)"
    )


async def setup_commands(application):
    """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥"""
    user_commands = [
        BotCommand("start", "üè† –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞"),
        BotCommand("news", "üì∞ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"),
        BotCommand("help", "‚ùì –ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
    ]

    admin_commands = [
        BotCommand("start", "üè† –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand("news", "üì∞ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"),
        BotCommand("stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"),
        BotCommand("edit_list", "üìù –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"),
        BotCommand("help", "‚ùì –ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
    ]

    await application.bot.set_my_commands(user_commands)

    try:
        from telegram import BotCommandScopeChat
        await application.bot.set_my_commands(
            admin_commands,
            scope=BotCommandScopeChat(chat_id=ADMIN_ID)
        )
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ({ADMIN_ID}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞: {e}")


def main():
    """üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return

    if ADMIN_ID == 0:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏ ADMIN_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("news", news_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CommandHandler("edit_list", admin_edit_list))
    application.add_handler(CommandHandler("edit", admin_edit_news))
    application.add_handler(CommandHandler("delete", admin_delete_news))
    application.add_handler(CallbackQueryHandler(subscribe_callback, pattern="^subscribe$"))
    application.add_handler(CallbackQueryHandler(reaction_callback, pattern="^reaction_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞
    application.add_handler(
        MessageHandler(
            (filters.TEXT | filters.PHOTO | filters.VIDEO | filters.Document.ALL) &
            filters.User(user_id=ADMIN_ID) & ~filters.COMMAND,
            admin_post
        )
    )

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏!")
    print(f"üëë ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ADMIN_ID}")
    print("üåç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –í–°–ï–• —É—Å—Ç—Ä–æ–π—Å—Ç–≤!")
    print("üì± –†–µ–∞–∫—Ü–∏–∏ –í–°–ï–ì–î–ê –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ–¥–∏–Ω —Ä—è–¥!")
    print("üîÑ –†–µ–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
    print("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
    print("üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —É–¥–∞–ª—è–µ—Ç –∏—Ö —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!")
    print("üïê –í—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ –ø–æ –ú–æ—Å–∫–≤–µ")

    print("\nüìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    print("  üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("  üìù /edit_list - —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("  ‚úèÔ∏è /edit ID —Ç–µ–∫—Å—Ç - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)")
    print("  üóë /delete ID - —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("  ‚ùì /help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")
    print("  üì§ –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) - –ø—É–±–ª–∏–∫–∞—Ü–∏—è")

    print("\nüì± –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    print("  üè† /start - –∑–∞–ø—É—Å–∫ –∏ –ø–æ–¥–ø–∏—Å–∫–∞")
    print("  üì∞ /news - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π")
    print("  üé≠ –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏")
    print("  ‚ùì /help - –ø–æ–º–æ—â—å")

    print("\nüåç –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π:")
    print("  üìè –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å—Ç–∞")
    print("  üíª –ò–¥–µ–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –∏ –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏")
    print("  üîÑ –í–°–ï–ì–î–ê –æ–¥–∏–Ω —Ä—è–¥ —Ä–µ–∞–∫—Ü–∏–π - –Ω–∏–∫–∞–∫–∏—Ö –º–Ω–æ–≥–æ—Ç–æ—á–∏–π!")
    print("  ‚ö° –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –ø–æ—Å—Ç–∞")
    print("  üìä –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ (1K, 1M)")
    print("  üéØ 3 —Ä–µ–∂–∏–º–∞: minimal, compact, standard")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    async def post_init(application):
        await setup_commands(application)

    application.post_init = post_init

    # –ó–∞–ø—É—Å–∫–∞–µ–º
    application.run_polling()


if __name__ == '__main__':
    main()
