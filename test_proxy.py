#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ö–∏—Ä–æ–≤–µ—Ü –ú–µ–¥–∏–∞
–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test_proxy.py –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python test_proxy.py
"""

import json
import time
import requests
import os
from typing import Dict, List, Optional

def test_proxy(proxy_config: Dict, timeout: int = 10) -> Dict:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    proxy_name = proxy_config.get('name', 'Unknown')
    proxies = {
        'http': proxy_config.get('http'),
        'https': proxy_config.get('https')
    }
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_name}")
    
    test_results = {
        'name': proxy_name,
        'status': 'unknown',
        'response_time': None,
        'error': None,
        'ip_info': None
    }
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ httpbin.org
        start_time = time.time()
        
        response = requests.get(
            'https://httpbin.org/ip',
            proxies=proxies,
            timeout=timeout
        )
        
        response_time = round((time.time() - start_time) * 1000, 2)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        if response.status_code == 200:
            ip_data = response.json()
            test_results.update({
                'status': 'working',
                'response_time': response_time,
                'ip_info': ip_data.get('origin', 'Unknown IP')
            })
            print(f"   ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç! –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time}ms, IP: {ip_data.get('origin')}")
        else:
            test_results.update({
                'status': 'error',
                'response_time': response_time,
                'error': f'HTTP {response.status_code}'
            })
            print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            
    except requests.exceptions.ProxyError as e:
        test_results.update({
            'status': 'proxy_error',
            'error': str(e)
        })
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        
    except requests.exceptions.Timeout:
        test_results.update({
            'status': 'timeout',
            'error': f'Timeout after {timeout}s'
        })
        print(f"   ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ {timeout} —Å–µ–∫—É–Ω–¥")
        
    except requests.exceptions.ConnectionError as e:
        test_results.update({
            'status': 'connection_error',
            'error': str(e)
        })
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        
    except Exception as e:
        test_results.update({
            'status': 'unknown_error',
            'error': str(e)
        })
        print(f"   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    return test_results

def test_gemini_api_through_proxy(proxy_config: Dict, api_key: str, timeout: int = 30) -> Dict:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Gemini API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    proxy_name = proxy_config.get('name', 'Unknown')
    proxies = {
        'http': proxy_config.get('http'),
        'https': proxy_config.get('https')
    }
    
    print(f"ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini API —á–µ—Ä–µ–∑ {proxy_name}...")
    
    test_payload = {
        "contents": [
            {
                "role": "user",
                "parts": [{"text": "Hello, test message"}]
            }
        ]
    }
    
    headers = {
        'x-goog-api-key': api_key,
        'Content-Type': 'application/json'
    }
    
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent"
    
    try:
        start_time = time.time()
        
        response = requests.post(
            url,
            headers=headers,
            json=test_payload,
            proxies=proxies,
            timeout=timeout
        )
        
        response_time = round((time.time() - start_time) * 1000, 2)
        
        if response.status_code == 200:
            print(f"   ‚úÖ Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time}ms")
            return {
                'status': 'working',
                'response_time': response_time,
                'api_accessible': True
            }
        elif response.status_code == 403:
            print(f"   ‚ùå API –∫–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (403)")
            return {
                'status': 'api_key_error',
                'response_time': response_time,
                'api_accessible': False,
                'error': 'Invalid API key'
            }
        elif response.status_code == 429:
            print(f"   ‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429)")
            return {
                'status': 'rate_limited',
                'response_time': response_time,
                'api_accessible': True,
                'error': 'Rate limited'
            }
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return {
                'status': 'api_error',
                'response_time': response_time,
                'error': f'HTTP {response.status_code}'
            }
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return {
            'status': 'error',
            'error': str(e),
            'api_accessible': False
        }

def test_direct_connection(timeout: int = 10) -> Dict:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    print("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
    
    try:
        start_time = time.time()
        
        response = requests.get(
            'https://httpbin.org/ip',
            timeout=timeout
        )
        
        response_time = round((time.time() - start_time) * 1000, 2)
        
        if response.status_code == 200:
            ip_data = response.json()
            print(f"   ‚úÖ –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ä–µ–º—è: {response_time}ms, IP: {ip_data.get('origin')}")
            return {
                'status': 'working',
                'response_time': response_time,
                'ip_info': ip_data.get('origin')
            }
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: HTTP {response.status_code}")
            return {
                'status': 'error',
                'error': f'HTTP {response.status_code}'
            }
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return {
            'status': 'error',
            'error': str(e)
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ö–∏—Ä–æ–≤–µ—Ü –ú–µ–¥–∏–∞\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_file = 'proxy_config.json'
    
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª proxy_config.json —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏.")
        return
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {config_file}: {e}")
        return
    
    proxies = config.get('proxies', [])
    settings = config.get('settings', {})
    timeout = settings.get('proxy_timeout', 10)
    
    if not proxies:
        print("‚ùå –ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {timeout} —Å–µ–∫—É–Ω–¥\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    direct_result = test_direct_connection(timeout)
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–∫—Å–∏
    test_results = []
    
    for proxy in proxies:
        if not proxy.get('enabled', True):
            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏: {proxy.get('name', 'Unknown')}")
            continue
            
        result = test_proxy(proxy, timeout)
        test_results.append(result)
        print()
    
    # –°—É–º–º–∞—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 60)
    
    # –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    direct_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if direct_result['status'] == 'working' else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    print(f"üåê –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {direct_status}")
    
    if direct_result.get('response_time'):
        print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {direct_result['response_time']}ms")
    if direct_result.get('ip_info'):
        print(f"   –í–∞—à IP: {direct_result['ip_info']}")
    
    print()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∫—Å–∏
    working_proxies = 0
    total_tested = len(test_results)
    
    for result in test_results:
        status_emoji = "‚úÖ" if result['status'] == 'working' else "‚ùå"
        print(f"{status_emoji} {result['name']}: {result['status']}")
        
        if result['status'] == 'working':
            working_proxies += 1
            if result['response_time']:
                print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['response_time']}ms")
            if result['ip_info']:
                print(f"   IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {result['ip_info']}")
        else:
            if result['error']:
                print(f"   –û—à–∏–±–∫–∞: {result['error']}")
    
    print()
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {working_proxies}/{total_tested} –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    if working_proxies == 0:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        if direct_result['status'] == 'working':
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í–∫–ª—é—á–∏—Ç–µ direct_connection_fallback –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        else:
            print("üö® –ö—Ä–∏—Ç–∏—á–Ω–æ: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É!")
    elif working_proxies < total_tested:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    else:
        print("üéâ –í—Å–µ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!")
    
    # –¢–µ—Å—Ç Gemini API (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
    print("\n" + "=" * 60)
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GEMINI API:")
    print("=" * 60)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
    api_key = os.getenv('GEMINI_API_KEY')
    
    if not api_key:
        print("üîë –í–≤–µ–¥–∏—Ç–µ Gemini API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        api_key = input("API Key: ").strip()
    
    if api_key:
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini API —Å –∫–ª—é—á–æ–º ...{api_key[-10:]}")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —á–µ—Ä–µ–∑ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏
        api_tests_performed = 0
        for result in test_results:
            if result['status'] == 'working' and api_tests_performed < 2:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ 2 –ª—É—á—à–∏—Ö –ø—Ä–æ–∫—Å–∏
                proxy = next((p for p in proxies if p['name'] == result['name']), None)
                if proxy:
                    api_result = test_gemini_api_through_proxy(proxy, api_key, 30)
                    api_tests_performed += 1
                    print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if direct_result['status'] == 'working':
            print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini API —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
            try:
                start_time = time.time()
                
                test_payload = {
                    "contents": [
                        {
                            "role": "user", 
                            "parts": [{"text": "Test direct connection"}]
                        }
                    ]
                }
                
                headers = {
                    'x-goog-api-key': api_key,
                    'Content-Type': 'application/json'
                }
                
                url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent"
                
                response = requests.post(
                    url,
                    headers=headers,
                    json=test_payload,
                    timeout=30
                )
                
                response_time = round((time.time() - start_time) * 1000, 2)
                
                if response.status_code == 200:
                    print(f"   ‚úÖ Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ! –í—Ä–µ–º—è: {response_time}ms")
                elif response.status_code == 403:
                    print(f"   ‚ùå API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (403)")
                elif response.status_code == 429:
                    print(f"   ‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429)")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ API: {e}")
    else:
        print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API (–Ω–µ—Ç –∫–ª—é—á–∞)")
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)
    
    if working_proxies >= 2:
        print("‚úÖ –£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    elif working_proxies == 1:
        print("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏ - –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
    else:
        print("üö® –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    if direct_result['status'] == 'working':
        print("‚úÖ –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ fallback")
    else:
        print("‚ùå –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    
    print("\nüîß –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
    print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ proxy_config.json –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
    print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ webapp_kyrov_server.py")
    print("3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST /api/admin/proxy/reload –¥–ª—è –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
