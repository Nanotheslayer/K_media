/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ö–∏—Ä–æ–≤–µ—Ü –ú–µ–¥–∏–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥)
const API_BASE_URL = '';

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
 */
class ApiClient {
    constructor(baseUrl = API_BASE_URL) {
        this.baseUrl = baseUrl;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram User ID –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
     */
    getTelegramUserId() {
        if (window.TelegramWebApp && window.TelegramWebApp.isInTelegram()) {
            const user = window.TelegramWebApp.getTelegramUser();
            if (user && user.id) {
                console.log('üë§ –ü–æ–ª—É—á–µ–Ω Telegram User ID:', user.id);
                return user.id.toString();
            }
        }
        console.log('üë§ Telegram User ID –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserHeaders() {
        const headers = {};
        const telegramUserId = this.getTelegramUserId();
        
        if (telegramUserId) {
            headers['X-Telegram-User-Id'] = telegramUserId;
            console.log('üì§ –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-User-Id:', telegramUserId);
        }
        
        return headers;
    }

    /**
     * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async makeRequest(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        
        const defaultOptions = {
            headers: {},
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userHeaders = this.getUserHeaders();
        Object.assign(defaultOptions.headers, userHeaders);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ FormData
        if (options.body && !(options.body instanceof FormData)) {
            defaultOptions.headers['Content-Type'] = 'application/json';
        }

        const requestOptions = {
            ...defaultOptions,
            ...options,
            headers: {
                ...defaultOptions.headers,
                ...options.headers,
            },
        };

        console.log(`üåê API Request: ${requestOptions.method || 'GET'} ${url}`);
        console.log('üì¶ Request body type:', options.body ? options.body.constructor.name : 'none');
        console.log('üìã Headers:', requestOptions.headers);

        try {
            const response = await fetch(url, requestOptions);
            
            console.log(`üì° API Response: ${response.status} ${response.statusText}`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                return await response.json();
            } else {
                return await response.text();
            }
        } catch (error) {
            console.error(`‚ùå API Error for ${url}:`, error);
            throw error;
        }
    }

    /**
     * GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async get(endpoint, params = {}) {
        // –î–æ–±–∞–≤–ª—è–µ–º telegram_user_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        const telegramUserId = this.getTelegramUserId();
        if (telegramUserId) {
            params.telegram_user_id = telegramUserId;
        }

        const searchParams = new URLSearchParams(params);
        const urlWithParams = searchParams.toString() ? `${endpoint}?${searchParams}` : endpoint;
        
        return this.makeRequest(urlWithParams, { method: 'GET' });
    }

    /**
     * POST –∑–∞–ø—Ä–æ—Å —Å JSON –¥–∞–Ω–Ω—ã–º–∏
     */
    async post(endpoint, data) {
        // –î–æ–±–∞–≤–ª—è–µ–º telegram_user_id –≤ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        const telegramUserId = this.getTelegramUserId();
        if (telegramUserId && data && typeof data === 'object') {
            data.telegram_user_id = telegramUserId;
        }

        return this.makeRequest(endpoint, {
            method: 'POST',
            body: JSON.stringify(data),
        });
    }

    /**
     * POST –∑–∞–ø—Ä–æ—Å —Å FormData (–¥–ª—è —Ñ–∞–π–ª–æ–≤)
     */
    async postFormData(endpoint, formData) {
        // –î–æ–±–∞–≤–ª—è–µ–º telegram_user_id –≤ FormData –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        const telegramUserId = this.getTelegramUserId();
        if (telegramUserId && formData instanceof FormData) {
            formData.append('telegram_user_id', telegramUserId);
            console.log('üì§ –î–æ–±–∞–≤–ª–µ–Ω telegram_user_id –≤ FormData:', telegramUserId);
        }

        return this.makeRequest(endpoint, {
            method: 'POST',
            headers: {}, // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData
            body: formData,
        });
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
const apiClient = new ApiClient();

/**
 * API –¥–ª—è —á–∞—Ç–∞ —Å –®–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏–Ω—ã–º
 */
class ChatAPI {
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
     */
    static async sendMessage(message, imageFile = null) {
        const formData = new FormData();

        if (message) {
            formData.append('message', message);
        }

        if (imageFile) {
            formData.append('image', imageFile);
        }

        console.log('üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç...');
        return apiClient.postFormData('/api/chat', formData);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
     */
    static async getHistory(limit = 10) {
        console.log('üìö –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞...');
        return apiClient.get('/api/chat/history', { limit });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    static async clearHistory() {
        console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞...');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç, –Ω–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞
        return apiClient.post('/api/chat/clear', {});
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
     */
    static async getSettings() {
        return apiClient.get('/api/chat/settings');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
     */
    static async updateSettings(settings) {
        return apiClient.post('/api/chat/settings', settings);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞
     */
    static async getStatus() {
        return apiClient.get('/api/chat/status');
    }
}

/**
 * API –¥–ª—è –≥–∞–∑–µ—Ç—ã
 */
class NewspaperAPI {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –≥–∞–∑–µ—Ç—ã
     */
    static async getArticles() {
        return apiClient.get('/api/newspaper');
    }
}

/**
 * API –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–æ–±—ã—Ç–∏–π
 */
class EventsAPI {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    static async getEvents() {
        return apiClient.get('/api/events');
    }
}

/**
 * API –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 */
class FeedbackAPI {
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
     */
    static async submitFeedback(feedbackData) {
        return apiClient.post('/api/feedback', feedbackData);
    }
}

/**
 * API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class TestAPI {
    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
     */
    static async test() {
        return apiClient.get('/api/test');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
     */
    static async health() {
        return apiClient.get('/health');
    }
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
 */
class ApiUtils {
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    static async checkServerStatus() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...');
            
            const [testResponse, chatStatus] = await Promise.all([
                TestAPI.test(),
                ChatAPI.getStatus()
            ]);
            
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:', testResponse);
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å —á–∞—Ç–∞:', chatStatus);

            return {
                server: testResponse,
                chat: chatStatus
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
            return null;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    static async testUserIdentification() {
        try {
            console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            
            const telegramUserId = apiClient.getTelegramUserId();
            console.log('üë§ –¢–µ–∫—É—â–∏–π Telegram User ID:', telegramUserId);
            
            if (telegramUserId) {
                console.log('‚úÖ Telegram –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞');
                
                // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                const history = await ChatAPI.getHistory();
                if (history.success) {
                    console.log('üìö –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
                        user_id: history.user_id,
                        messages: history.history.length
                    });
                }
            } else {
                console.log('‚ö†Ô∏è Telegram –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback');
            }
            
            return telegramUserId;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            return null;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
     */
    static handleApiError(error, context = 'API') {
        console.error(`‚ùå ${context} Error:`, error);

        let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';

        if (error.message.includes('Failed to fetch')) {
            userMessage = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.';
        } else if (error.message.includes('413')) {
            userMessage = '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.';
        } else if (error.message.includes('404')) {
            userMessage = '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
        } else if (error.message.includes('500')) {
            userMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
        }

        return userMessage;
    }

    /**
     * Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    static async retryRequest(requestFunction, maxRetries = 3, delay = 1000) {
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                return await requestFunction();
            } catch (error) {
                console.warn(`‚ö†Ô∏è Attempt ${attempt} failed:`, error.message);
                
                if (attempt === maxRetries) {
                    throw error;
                }
                
                // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                const waitTime = delay * Math.pow(2, attempt - 1);
                console.log(`‚è≥ Waiting ${waitTime}ms before retry...`);
                await new Promise(resolve => setTimeout(resolve, waitTime));
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
     */
    static validateFileSize(file, maxSizeMB = 50) {
        const maxSizeBytes = maxSizeMB * 1024 * 1024;
        
        if (file.size > maxSizeBytes) {
            throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${maxSizeMB}MB`);
        }
        
        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
     */
    static validateFileType(file, allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/heic', 'image/heif']) {
        if (!allowedTypes.includes(file.type)) {
            throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ' + allowedTypes.join(', '));
        }
        
        return true;
    }

    /**
     * –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
     */
    static async compressImage(file, maxSizeMB = 2, quality = 0.8) {
        return new Promise((resolve) => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();

            img.onload = function() {
                // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Å–∂–∞—Ç–∏—è
                let { width, height } = img;
                const maxDimension = 1200; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞

                if (width > maxDimension || height > maxDimension) {
                    if (width > height) {
                        height = (height * maxDimension) / width;
                        width = maxDimension;
                    } else {
                        width = (width * maxDimension) / height;
                        height = maxDimension;
                    }
                }

                canvas.width = width;
                canvas.height = height;

                // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas
                ctx.drawImage(img, 0, 0, width, height);

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
                canvas.toBlob((blob) => {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π File –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                    const originalExtension = file.name.split('.').pop().toLowerCase();
                    const compressedFileName = file.name.replace(/\.[^/.]+$/, '') + '_compressed.jpg';

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π File –æ–±—ä–µ–∫—Ç —Å –∏–º–µ–Ω–µ–º –∏ —Ç–∏–ø–æ–º
                    const compressedFile = new File([blob], compressedFileName, {
                        type: 'image/jpeg',
                        lastModified: Date.now()
                    });

                    console.log('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ:', {
                        originalName: file.name,
                        compressedName: compressedFile.name,
                        originalSize: (file.size / 1024 / 1024).toFixed(2) + 'MB',
                        compressedSize: (compressedFile.size / 1024 / 1024).toFixed(2) + 'MB',
                        compression: ((1 - compressedFile.size / file.size) * 100).toFixed(1) + '%',
                        originalType: file.type,
                        compressedType: compressedFile.type
                    });

                    resolve(compressedFile);
                }, 'image/jpeg', quality);
            };

            img.src = URL.createObjectURL(file);
        });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è API
     */
    static formatDateForAPI(date) {
        return date.toISOString().split('T')[0];
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ API
     */
    static parseDateFromAPI(dateString) {
        return new Date(dateString);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ—Å—Ç–∏ —Å–∂–∞—Ç–∏—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
     */
    static async prepareImageFile(file) {
        try {
            console.log('üì∑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
                name: file.name,
                type: file.type,
                size: (file.size / 1024 / 1024).toFixed(2) + 'MB'
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            ApiUtils.validateFileType(file);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            ApiUtils.validateFileSize(file, 50); // 50MB –º–∞–∫—Å–∏–º—É–º

            // –°–∂–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 2MB
            if (file.size > 2 * 1024 * 1024) {
                console.log('üóúÔ∏è –§–∞–π–ª –±–æ–ª—å—à–µ 2MB, —Å–∂–∏–º–∞–µ–º...');
                return await ApiUtils.compressImage(file, 2, 0.85);
            } else {
                console.log('‚úÖ –§–∞–π–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å');
                return file;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç API –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.API = {
    Chat: ChatAPI,
    Newspaper: NewspaperAPI,
    Events: EventsAPI,
    Feedback: FeedbackAPI,
    Test: TestAPI,
    Utils: ApiUtils
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    ApiUtils.checkServerStatus();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setTimeout(() => {
        ApiUtils.testUserIdentification();
    }, 2000);
});
