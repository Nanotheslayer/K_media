/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram WebApp
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è Telegram —Ñ—É–Ω–∫—Ü–∏–π
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegram
let tg = window.Telegram?.WebApp;
let isInTelegram = !!tg && !!tg.initData;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è viewport
let initialViewportHeight = window.innerHeight;
let keyboardDetectionTimeout = null;
let isKeyboardOpen = false;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
 */
function initializeTelegram() {
    console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if (isInTelegram) {
        document.body.classList.add('telegram-mode');
        console.log('ü§ñ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Telegram WebApp');
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
        tg.ready();
        tg.expand();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        tg.setHeaderColor('#2c3e50');
        tg.setBackgroundColor('#2c3e50');

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport
        if (tg.viewportHeight) {
            document.documentElement.style.setProperty('--tg-viewport-height', tg.viewportHeight + 'px');
        }

        if (tg.viewportStableHeight) {
            document.documentElement.style.setProperty('--tg-viewport-stable-height', tg.viewportStableHeight + 'px');
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π viewport –¥–ª—è Telegram
        if (tg.onEvent) {
            tg.onEvent('viewportChanged', handleTelegramViewportChange);
        }

        console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
        document.body.classList.add('standalone');
        console.log('üåê –ó–∞–ø—É—Å–∫ –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è viewport
    initializeViewportTracking();
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π viewport –≤ Telegram
 */
function handleTelegramViewportChange() {
    console.log('üì± Telegram viewport changed:', {
        height: tg.viewportHeight,
        stableHeight: tg.viewportStableHeight,
        isExpanded: tg.isExpanded
    });

    setTimeout(() => {
        detectKeyboardState();
        ensureInputVisible();
    }, 100);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π viewport
 */
function initializeViewportTracking() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
    initialViewportHeight = window.innerHeight;
    console.log('üìè Initial viewport height:', initialViewportHeight);

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π viewport
    if (window.visualViewport) {
        window.visualViewport.addEventListener('resize', handleViewportChange);
        window.visualViewport.addEventListener('scroll', handleViewportChange);
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    window.addEventListener('resize', handleViewportChange);
    window.addEventListener('orientationchange', function() {
        setTimeout(() => {
            initialViewportHeight = window.innerHeight;
            detectKeyboardState();
        }, 500);
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    document.addEventListener('focusin', function(e) {
        if (e.target && e.target.id === 'chatInput') {
            setTimeout(() => {
                detectKeyboardState();
                ensureInputVisible();
            }, 300);
        }
    });

    document.addEventListener('focusout', function(e) {
        if (e.target && e.target.id === 'chatInput') {
            setTimeout(detectKeyboardState, 300);
        }
    });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞ viewport —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
 */
function handleViewportChange() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
    if (keyboardDetectionTimeout) {
        clearTimeout(keyboardDetectionTimeout);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    keyboardDetectionTimeout = setTimeout(() => {
        detectKeyboardState();
    }, 150);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
function detectKeyboardState() {
    const currentHeight = window.innerHeight;
    const heightDifference = initialViewportHeight - currentHeight;
    const keyboardThreshold = 100; // –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    const wasKeyboardOpen = isKeyboardOpen;
    isKeyboardOpen = heightDifference > keyboardThreshold;

    // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if (wasKeyboardOpen !== isKeyboardOpen) {
        console.log('‚å®Ô∏è Keyboard state changed:', isKeyboardOpen ? 'opened' : 'closed', 
                   'Height diff:', heightDifference, 'Current height:', currentHeight);
        handleKeyboardToggle();
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
function handleKeyboardToggle() {
    const chatModal = document.getElementById('chatModal');
    const chatHeader = document.getElementById('chatHeader');
    const chatMessages = document.getElementById('chatMessages');
    const inputContainer = document.getElementById('chatInputContainer');

    if (chatModal && chatModal.style.display === 'block') {
        if (isKeyboardOpen) {
            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞ - –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if (chatHeader) {
                chatHeader.classList.add('keyboard-hidden');
            }
            if (chatMessages) {
                chatMessages.classList.add('header-hidden');
                if (chatMessages.classList.contains('has-preview')) {
                    chatMessages.classList.add('keyboard-open');
                }
            }
            if (inputContainer) {
                inputContainer.classList.add('keyboard-open');
            }

            console.log('üîß Interface adapted for keyboard');
        } else {
            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if (chatHeader) {
                chatHeader.classList.remove('keyboard-hidden');
            }
            if (chatMessages) {
                chatMessages.classList.remove('header-hidden', 'keyboard-open');
            }
            if (inputContainer) {
                inputContainer.classList.remove('keyboard-open');
            }

            console.log('üîß Interface restored - keyboard closed');
        }

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
        setTimeout(() => {
            if (chatMessages) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            ensureInputVisible();
        }, 100);
    }
}

/**
 * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
 */
function ensureInputVisible() {
    const inputContainer = document.getElementById('chatInputContainer');
    const chatInput = document.getElementById('chatInput');
    const sendBtn = document.getElementById('chatSendBtn');
    const imageBtn = document.querySelector('.chat-image-btn');
    const inputRow = document.querySelector('.chat-input-row');

    if (inputContainer) {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –≤–∏–¥–∏–º—ã–º–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
        inputContainer.style.display = 'block';
        inputContainer.style.visibility = 'visible';
        inputContainer.style.opacity = '1';
        inputContainer.style.position = 'fixed';
        inputContainer.style.bottom = '0';
        inputContainer.style.left = '0';
        inputContainer.style.right = '0';
        inputContainer.style.width = '100%';
        inputContainer.style.zIndex = '1002';
        inputContainer.style.transform = 'none';
        inputContainer.style.boxSizing = 'border-box';

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
        [chatInput, sendBtn, imageBtn, inputRow].forEach(element => {
            if (element) {
                element.style.display = element === inputRow ? 'flex' : 'block';
                element.style.visibility = 'visible';
                element.style.opacity = '1';
            }
        });

        console.log('‚úÖ Input container and all elements made visible and fixed');
    } else {
        console.error('‚ùå Input container not found!');
    }
}

/**
 * –°–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
function hideKeyboard() {
    const chatInput = document.getElementById('chatInput');
    if (chatInput && document.activeElement === chatInput) {
        chatInput.blur();
        console.log('‚å®Ô∏è Keyboard hidden by tap');

        // –õ–µ–≥–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        if (isInTelegram && tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('light');
        }
    }
}

/**
 * Haptic Feedback –¥–ª—è Telegram
 */
function triggerHapticFeedback(type = 'light') {
    if (isInTelegram && tg.HapticFeedback) {
        switch (type) {
            case 'light':
                tg.HapticFeedback.impactOccurred('light');
                break;
            case 'medium':
                tg.HapticFeedback.impactOccurred('medium');
                break;
            case 'heavy':
                tg.HapticFeedback.impactOccurred('heavy');
                break;
            case 'success':
                tg.HapticFeedback.notificationOccurred('success');
                break;
            case 'warning':
                tg.HapticFeedback.notificationOccurred('warning');
                break;
            case 'error':
                tg.HapticFeedback.notificationOccurred('error');
                break;
        }
    }
}

/**
 * –ü–æ–∫–∞–∑ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä
 */
function showAlert(message) {
    if (isInTelegram && tg.showAlert) {
        tg.showAlert(message);
    } else {
        alert(message);
    }
}

/**
 * –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä
 */
function showConfirm(message, callback) {
    if (isInTelegram && tg.showConfirm) {
        tg.showConfirm(message, callback);
    } else {
        const result = confirm(message);
        callback(result);
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
 */
function getTelegramUser() {
    if (isInTelegram && tg.initDataUnsafe && tg.initDataUnsafe.user) {
        return {
            id: tg.initDataUnsafe.user.id,
            firstName: tg.initDataUnsafe.user.first_name,
            lastName: tg.initDataUnsafe.user.last_name,
            username: tg.initDataUnsafe.user.username,
            languageCode: tg.initDataUnsafe.user.language_code
        };
    }
    return null;
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ä–µ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
function logEnvironmentInfo() {
    console.log('üîç Environment Info:', {
        isInTelegram: isInTelegram,
        userAgent: navigator.userAgent,
        viewport: {
            width: window.innerWidth,
            height: window.innerHeight,
            initialHeight: initialViewportHeight
        },
        telegram: isInTelegram ? {
            version: tg.version,
            platform: tg.platform,
            colorScheme: tg.colorScheme,
            isExpanded: tg.isExpanded,
            viewportHeight: tg.viewportHeight,
            viewportStableHeight: tg.viewportStableHeight
        } : null,
        user: getTelegramUser()
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.TelegramWebApp = {
    initialize: initializeTelegram,
    isInTelegram: () => isInTelegram,
    hideKeyboard: hideKeyboard,
    triggerHapticFeedback: triggerHapticFeedback,
    showAlert: showAlert,
    showConfirm: showConfirm,
    getTelegramUser: getTelegramUser,
    logEnvironmentInfo: logEnvironmentInfo,
    ensureInputVisible: ensureInputVisible,
    isKeyboardOpen: () => isKeyboardOpen
};
