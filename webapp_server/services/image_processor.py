"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (blob) –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
"""
import base64
import logging
from typing import Dict, Optional, Tuple
from werkzeug.datastructures import FileStorage

logger = logging.getLogger(__name__)


class ImageProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    SUPPORTED_FORMATS = {
        'jpg': 'image/jpeg',
        'jpeg': 'image/jpeg',
        'png': 'image/png',
        'webp': 'image/webp',
        'heic': 'image/heic',
        'heif': 'image/heif',
        'gif': 'image/gif',
        'bmp': 'image/bmp'
    }

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ MIME —Ç–∏–ø—ã
    SUPPORTED_MIME_TYPES = {
        'image/jpeg',
        'image/png',
        'image/webp',
        'image/heic',
        'image/heif',
        'image/gif',
        'image/bmp'
    }

    # –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    FILE_SIGNATURES = {
        b'\xFF\xD8\xFF': 'image/jpeg',  # JPEG
        b'\x89PNG\r\n\x1a\n': 'image/png',  # PNG
        b'RIFF': 'image/webp',  # WebP (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
        b'GIF87a': 'image/gif',  # GIF87a
        b'GIF89a': 'image/gif',  # GIF89a
        b'BM': 'image/bmp',  # BMP
    }

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–≤ –±–∞–π—Ç–∞—Ö)
    MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB (—É–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç)

    @staticmethod
    def detect_file_type_by_content(file_data: bytes) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–º–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PNG
            if file_data.startswith(b'\x89PNG\r\n\x1a\n'):
                return 'image/png'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JPEG
            if file_data.startswith(b'\xFF\xD8\xFF'):
                return 'image/jpeg'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º WebP
            if file_data.startswith(b'RIFF') and b'WEBP' in file_data[:12]:
                return 'image/webp'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º GIF
            if file_data.startswith(b'GIF87a') or file_data.startswith(b'GIF89a'):
                return 'image/gif'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º BMP
            if file_data.startswith(b'BM'):
                return 'image/bmp'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HEIC/HEIF (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if b'ftyp' in file_data[:20]:
                if b'heic' in file_data[:20] or b'mif1' in file_data[:20]:
                    return 'image/heic'
                elif b'heif' in file_data[:20]:
                    return 'image/heif'

            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞, –ø–µ—Ä–≤—ã–µ 20 –±–∞–π—Ç: {file_data[:20]}")
            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞: {e}")
            return None

    @staticmethod
    def get_mime_type_from_extension(filename: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞"""
        if not filename:
            return 'image/jpeg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        extension = filename.split('.')[-1].lower() if '.' in filename else ''

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π MIME —Ç–∏–ø
        return ImageProcessor.SUPPORTED_FORMATS.get(extension, 'image/jpeg')

    @staticmethod
    def determine_mime_type(file: FileStorage, file_data: bytes = None) -> str:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if hasattr(file, 'content_type') and file.content_type:
            content_type = file.content_type.lower()
            if content_type in ImageProcessor.SUPPORTED_MIME_TYPES:
                logger.info(f"üîç MIME —Ç–∏–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ Content-Type: {content_type}")
                return content_type

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
        if file.filename and '.' in file.filename:
            mime_from_extension = ImageProcessor.get_mime_type_from_extension(file.filename)
            if mime_from_extension != 'image/jpeg':  # –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–∏–ø
                logger.info(f"üîç MIME —Ç–∏–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {mime_from_extension}")
                return mime_from_extension

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞
        if file_data:
            mime_from_content = ImageProcessor.detect_file_type_by_content(file_data)
            if mime_from_content:
                logger.info(f"üîç MIME —Ç–∏–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: {mime_from_content}")
                return mime_from_content

        # 4. –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø
        if not file_data:
            try:
                current_position = file.tell()
                file.seek(0)
                first_bytes = file.read(20)
                file.seek(current_position)

                mime_from_content = ImageProcessor.detect_file_type_by_content(first_bytes)
                if mime_from_content:
                    logger.info(f"üîç MIME —Ç–∏–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –ø–µ—Ä–≤—ã–º –±–∞–π—Ç–∞–º: {mime_from_content}")
                    return mime_from_content
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞: {e}")

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JPEG
        logger.info("üîç MIME —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: image/jpeg")
        return 'image/jpeg'

    @staticmethod
    def validate_image(file: FileStorage) -> Tuple[bool, Optional[str]]:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
        if not file:
            return False, "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        try:
            file.seek(0, 2)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            file_size = file.tell()
            file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ

            if file_size > ImageProcessor.MAX_FILE_SIZE:
                return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {ImageProcessor.MAX_FILE_SIZE // (1024*1024)}MB"

            if file_size == 0:
                return False, "–§–∞–π–ª –ø—É—Å—Ç–æ–π"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
            return False, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ
        mime_type = ImageProcessor.determine_mime_type(file)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MIME —Ç–∏–ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        if mime_type not in ImageProcessor.SUPPORTED_MIME_TYPES:
            return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {mime_type}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(ImageProcessor.SUPPORTED_MIME_TYPES)}"

        return True, None

    @staticmethod
    def process_uploaded_image(file: FileStorage) -> Tuple[Optional[Dict[str, str]], Optional[str]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: name='{file.filename}', content_type='{getattr(file, 'content_type', 'unknown')}'")

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å—Ä–∞–∑—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            file_data = file.read()
            file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏—Å—å
            if not file_data:
                return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª"

            logger.info(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(file_data)} –±–∞–π—Ç ({len(file_data)/1024/1024:.2f} MB)")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø —Å —É—á–µ—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            mime_type = ImageProcessor.determine_mime_type(file, file_data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if mime_type not in ImageProcessor.SUPPORTED_MIME_TYPES:
                return None, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {mime_type}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(ImageProcessor.SUPPORTED_MIME_TYPES)}"

            # –í–∞–ª–∏–¥–∞—Ü–∏—è (—Ç–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞)
            is_valid, error_message = ImageProcessor.validate_image(file)
            if not is_valid:
                return None, error_message

            # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
            base64_data = base64.b64encode(file_data).decode('utf-8')

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            image_data = {
                "mime_type": mime_type,
                "data": base64_data
            }

            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: MIME={mime_type}, base64_size={len(base64_data)} —Å–∏–º–≤–æ–ª–æ–≤")

            return image_data, None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
            return None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"

    @staticmethod
    def encode_image_from_bytes(image_bytes: bytes, mime_type: str = "image/jpeg") -> Dict[str, str]:
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64"""
        try:
            base64_data = base64.b64encode(image_bytes).decode('utf-8')
            return {
                "mime_type": mime_type,
                "data": base64_data
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            raise

    @staticmethod
    def decode_base64_image(base64_data: str) -> bytes:
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã"""
        try:
            return base64.b64decode(base64_data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {e}")
            raise

    @staticmethod
    def get_image_info(image_data: Dict[str, str]) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        try:
            base64_length = len(image_data.get('data', ''))
            # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (base64 —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 33%)
            approx_size = base64_length * 0.75

            return {
                'mime_type': image_data.get('mime_type', 'unknown'),
                'base64_length': base64_length,
                'approx_size_bytes': int(approx_size),
                'approx_size_mb': round(approx_size / (1024 * 1024), 2)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {e}")
            return {}

    @staticmethod
    def is_image_file(filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        if not filename or '.' not in filename:
            return False

        extension = filename.split('.')[-1].lower()
        return extension in ImageProcessor.SUPPORTED_FORMATS