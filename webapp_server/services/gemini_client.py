"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API
"""
import json
import time
import logging
import requests
from typing import Dict, List, Optional, Any, Tuple

from webapp_server.config import GEMINI_MODEL, GEMINI_FALLBACK_MODEL, GEMINI_BASE_URL, DEFAULT_SYSTEM_INSTRUCTION
from webapp_server.managers.key_manager import KeyManager
from webapp_server.managers.proxy_manager import ProxyManager

logger = logging.getLogger(__name__)


class GeminiClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Flask) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π multiple –ø—Ä–æ–∫—Å–∏ –∏ fallback –º–æ–¥–µ–ª–∏"""

    def __init__(self, key_manager: KeyManager, proxy_manager: ProxyManager):
        self.key_manager = key_manager
        self.proxy_manager = proxy_manager
        self.session = requests.Session()
        self.current_model = GEMINI_MODEL

    def _make_request(self, endpoint: str, payload: Dict[str, Any],
                     max_retries: int = 3, use_fallback: bool = True) -> Tuple[Optional[Dict], Optional[str]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏, –∫–ª—é—á–∞–º–∏ –∏ fallback –º–æ–¥–µ–ª—å—é"""

        models_to_try = [GEMINI_MODEL]

        # –î–æ–±–∞–≤–ª—è–µ–º fallback –º–æ–¥–µ–ª—å –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
        if use_fallback and GEMINI_FALLBACK_MODEL != GEMINI_MODEL:
            models_to_try.append(GEMINI_FALLBACK_MODEL)

        for model in models_to_try:
            self.current_model = model

            if model != GEMINI_MODEL:
                logger.warning(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ fallback –º–æ–¥–µ–ª—å: {model}")

            for attempt in range(max_retries):
                # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
                api_key = self.key_manager.get_next_available_key()
                if not api_key:
                    logger.error("üî¥ –í—Å–µ API –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    return None, "all_keys_unavailable"

                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
                proxy_info = self.proxy_manager.get_next_proxy()
                if not proxy_info:
                    logger.error("üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
                    return None, "proxy_unavailable"

                proxy_index = proxy_info['index']
                proxy_name = proxy_info['name']
                proxies = proxy_info['proxies']

                url = f"{GEMINI_BASE_URL}/models/{model}:{endpoint}"
                headers = {
                    'x-goog-api-key': api_key,
                    'Content-Type': 'application/json; charset=utf-8',
                    'Accept': 'application/json',
                    'Accept-Charset': 'utf-8'
                }

                try:
                    logger.info(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} (–º–æ–¥–µ–ª—å: {model}): "
                               f"API –∫–ª—é—á ...{api_key[-10:]} —á–µ—Ä–µ–∑ {proxy_name}")

                    response = requests.post(
                        url,
                        headers=headers,
                        json=payload,
                        proxies=proxies,
                        timeout=60
                    )

                    logger.info(f"üì° –û—Ç–≤–µ—Ç: {response.status_code} {response.reason}")

                    if response.status_code == 200:
                        # –£—Å–ø–µ—Ö!
                        try:
                            result = response.json()
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ {model} —á–µ—Ä–µ–∑ {proxy_name}")
                            self.proxy_manager.report_success(proxy_index)
                            return result, None
                        except ValueError as e:
                            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                            return None, "json_parse_error"

                    elif response.status_code == 503:
                        # –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ fallback
                        error_text = response.text[:500]
                        logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {model} –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ (503): {error_text}")

                        if model == GEMINI_MODEL and use_fallback:
                            logger.warning(f"üîÑ –ú–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (503), –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback")
                            break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏

                        self.proxy_manager.report_error(proxy_index, response.status_code)

                    elif response.status_code == 429:
                        # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                        logger.error(f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è –∫–ª—é—á–∞ ...{api_key[-10:]}")
                        self.key_manager.block_key(api_key, cooldown_minutes=5)
                        self.proxy_manager.report_error(proxy_index, response.status_code)

                    elif response.status_code == 400:
                        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º
                        logger.error(f"üí• –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (400): {response.text[:200]}")
                        return None, "bad_request"

                    else:
                        # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç {response.status_code}: {response.text[:200]}")
                        self.proxy_manager.report_error(proxy_index, response.status_code)

                except requests.exceptions.ProxyError as e:
                    logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ {proxy_name}: {e}")
                    self.proxy_manager.report_error(proxy_index)

                except requests.exceptions.Timeout:
                    logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ {proxy_name}")
                    self.proxy_manager.report_error(proxy_index)

                except requests.exceptions.ConnectionError as e:
                    logger.error(f"üì° –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ {proxy_name}: {e}")
                    self.proxy_manager.report_error(proxy_index)

                except Exception as e:
                    logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    self.proxy_manager.report_error(proxy_index)

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if attempt < max_retries - 1:
                    time.sleep(1)

        logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        return None, "max_retries_exceeded"

    def send_message(self, user_history: List[Dict], message: str = "",
                    image_data: Optional[Dict] = None,
                    use_google_search: bool = True,
                    use_url_context: bool = True,
                    use_persona: bool = True) -> Tuple[str, Optional[str]]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Gemini API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback –º–æ–¥–µ–ª–∏"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if message:
            parts.append({"text": message})

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if image_data:
            parts.append({
                "inline_data": {
                    "mime_type": image_data["mime_type"],
                    "data": image_data["data"]
                }
            })

        if not parts:
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å")
            return "", "empty_message"

        # –°–æ–∑–¥–∞–µ–º payload
        payload = {
            "contents": user_history + [{"role": "user", "parts": parts}],
            "generationConfig": {
                "maxOutputTokens": 8192,
                "temperature": 1.0,
                "topP": 0.95,
                "topK": 0
            },
            "safetySettings": [
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH",
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "threshold": "BLOCK_NONE"
                }
            ]
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞
        if use_persona and DEFAULT_SYSTEM_INSTRUCTION:
            payload["systemInstruction"] = {
                "role": "user",
                "parts": [{"text": DEFAULT_SYSTEM_INSTRUCTION}]
            }

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tools = []
        if use_google_search:
            tools.append({"google_search": {}})
        if use_url_context:
            tools.append({"url_context": {}})

        if tools:
            payload["tools"] = tools

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç {len(user_history)} –∑–∞–ø–∏—Å–µ–π")
        for i, entry in enumerate(user_history):
            if 'role' in entry and 'parts' in entry:
                logger.debug(f"  [{i}] {entry['role']}: {len(entry['parts'])} —á–∞—Å—Ç–µ–π")
            else:
                logger.warning(f"  [{i}] ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å: {list(entry.keys())}")

        logger.debug(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ {self.current_model}")

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback
            response_data, error_code = self._make_request("generateContent", payload, max_retries=3, use_fallback=True)

            if error_code:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {error_code}")
                return "", error_code

            if response_data and 'candidates' in response_data:
                candidate = response_data['candidates'][0]
                content = candidate.get('content', {})
                if 'parts' in content and content['parts']:
                    text = content['parts'][0].get('text', '')
                    if isinstance(text, bytes):
                        text = text.decode('utf-8')

                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
                    if self.current_model != GEMINI_MODEL:
                        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç fallback –º–æ–¥–µ–ª–∏: {self.current_model}")
                    else:
                        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏: {self.current_model}")

                    return text, None

            return "", "empty_response"

        except Exception as e:
            logger.error(f"üí• Critical error in send_message: {e}")
            return "", "processing_error"

    def test_connection(self, api_key: str = None, proxy_info: Dict = None) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º –∏ –ø—Ä–æ–∫—Å–∏"""
        try:
            test_key = api_key or self.key_manager.get_next_available_key()
            if not test_key:
                return False

            test_proxy = proxy_info or self.proxy_manager.get_next_proxy()
            if not test_proxy:
                return False

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å
            url = f"{GEMINI_BASE_URL}/models/{GEMINI_MODEL}:generateContent"
            headers = {
                'x-goog-api-key': test_key,
                'Content-Type': 'application/json'
            }

            payload = {
                "contents": [{"role": "user", "parts": [{"text": "test"}]}],
                "generationConfig": {"maxOutputTokens": 1}
            }

            response = requests.post(
                url,
                headers=headers,
                json=payload,
                proxies=test_proxy.get('proxies'),
                timeout=10
            )

            if response.status_code == 200:
                return True
            elif response.status_code == 503:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –º–æ–¥–µ–ª—å –ø—Ä–∏ 503
                logger.info("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (503), —Ç–µ—Å—Ç–∏—Ä—É–µ–º fallback")

                url_fallback = f"{GEMINI_BASE_URL}/models/{GEMINI_FALLBACK_MODEL}:generateContent"
                response_fallback = requests.post(
                    url_fallback,
                    headers=headers,
                    json=payload,
                    proxies=test_proxy.get('proxies'),
                    timeout=10
                )

                return response_fallback.status_code == 200

            return False

        except Exception as e:
            logger.error(f"Test connection failed: {e}")
            return False