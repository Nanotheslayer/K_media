"""
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Web App —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–π
"""
import sqlite3
import json
import logging
from typing import List, Dict, Optional, Any
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class WebAppDatabase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Web App"""
    
    def __init__(self, db_name: str = 'webapp_kyrov.db'):
        self.db_name = db_name
        self.init_db()
        self.migrate_db()  # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
    
    def migrate_db(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã newspaper_articles
            cursor.execute("PRAGMA table_info(newspaper_articles)")
            columns = [column[1] for column in cursor.fetchall()]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ newspaper_articles
            if 'published_date' not in columns:
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ published_date –≤ newspaper_articles")
                cursor.execute('''
                    ALTER TABLE newspaper_articles 
                    ADD COLUMN published_date TEXT DEFAULT CURRENT_TIMESTAMP
                ''')
            
            if 'views' not in columns:
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ views –≤ newspaper_articles")
                cursor.execute('''
                    ALTER TABLE newspaper_articles 
                    ADD COLUMN views INTEGER DEFAULT 0
                ''')
            
            if 'image_url' not in columns:
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ image_url –≤ newspaper_articles")
                cursor.execute('''
                    ALTER TABLE newspaper_articles 
                    ADD COLUMN image_url TEXT
                ''')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã calendar_events
            cursor.execute("PRAGMA table_info(calendar_events)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'is_recurring' not in columns:
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_recurring –≤ calendar_events")
                cursor.execute('''
                    ALTER TABLE calendar_events 
                    ADD COLUMN is_recurring BOOLEAN DEFAULT 0
                ''')
            
            if 'recurrence_pattern' not in columns:
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ recurrence_pattern –≤ calendar_events")
                cursor.execute('''
                    ALTER TABLE calendar_events 
                    ADD COLUMN recurrence_pattern TEXT
                ''')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã feedback
            cursor.execute("PRAGMA table_info(feedback)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'status' not in columns:
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ status –≤ feedback")
                cursor.execute('''
                    ALTER TABLE feedback 
                    ADD COLUMN status TEXT DEFAULT 'new'
                ''')
            
            if 'response' not in columns:
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ response –≤ feedback")
                cursor.execute('''
                    ALTER TABLE feedback 
                    ADD COLUMN response TEXT
                ''')
            
            if 'responded_at' not in columns:
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ responded_at –≤ feedback")
                cursor.execute('''
                    ALTER TABLE feedback 
                    ADD COLUMN responded_at TIMESTAMP
                ''')
            
            conn.commit()
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            conn.rollback()
        finally:
            conn.close()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Web App"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        try:
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–µ–π –≥–∞–∑–µ—Ç—ã
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS newspaper_articles (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title TEXT NOT NULL,
                    content TEXT NOT NULL,
                    author TEXT,
                    category TEXT,
                    image_url TEXT,
                    published_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    views INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS calendar_events (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title TEXT NOT NULL,
                    description TEXT,
                    event_date TEXT NOT NULL,
                    event_time TEXT,
                    location TEXT,
                    category TEXT,
                    is_recurring BOOLEAN DEFAULT 0,
                    recurrence_pattern TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS feedback (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_name TEXT,
                    department TEXT,
                    phone TEXT,
                    message TEXT NOT NULL,
                    category TEXT DEFAULT 'general',
                    status TEXT DEFAULT 'new',
                    response TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    responded_at TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS usage_analytics (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id TEXT,
                    action TEXT,
                    details TEXT,
                    ip_address TEXT,
                    user_agent TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS app_settings (
                    key TEXT PRIMARY KEY,
                    value TEXT,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —É–±–µ–¥–∏–ª–∏—Å—å —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            try:
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_articles_date ON newspaper_articles(published_date DESC)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_events_date ON calendar_events(event_date)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_feedback_status ON feedback(status)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_analytics_user ON usage_analytics(user_id)')
                conn.commit()
            except sqlite3.OperationalError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å: {e}")
            
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {self.db_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
        finally:
            conn.close()
    
    # ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –ì–ê–ó–ï–¢–´ ====================
    
    def add_article(self, title: str, content: str, author: str = None, 
                   category: str = None, image_url: str = None, 
                   published_date: str = None) -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        if not published_date:
            published_date = datetime.now().isoformat()
        
        cursor.execute('''
            INSERT INTO newspaper_articles 
            (title, content, author, category, image_url, published_date)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (title, content, author, category, image_url, published_date))
        
        article_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        logger.info(f"üì∞ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç—å—è #{article_id}: {title}")
        return article_id
    
    def get_newspaper_articles(self, limit: int = 10, offset: int = 0, 
                              category: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –≥–∞–∑–µ—Ç—ã"""
        conn = sqlite3.connect(self.db_name)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        try:
            if category:
                cursor.execute('''
                    SELECT * FROM newspaper_articles 
                    WHERE category = ?
                    ORDER BY published_date DESC 
                    LIMIT ? OFFSET ?
                ''', (category, limit, offset))
            else:
                cursor.execute('''
                    SELECT * FROM newspaper_articles 
                    ORDER BY published_date DESC 
                    LIMIT ? OFFSET ?
                ''', (limit, offset))
            
            articles = [dict(row) for row in cursor.fetchall()]
            
        except sqlite3.OperationalError as e:
            # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ published_date –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º created_at
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç–µ–π: {e}, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            
            if category:
                cursor.execute('''
                    SELECT * FROM newspaper_articles 
                    WHERE category = ?
                    ORDER BY created_at DESC 
                    LIMIT ? OFFSET ?
                ''', (category, limit, offset))
            else:
                cursor.execute('''
                    SELECT * FROM newspaper_articles 
                    ORDER BY created_at DESC 
                    LIMIT ? OFFSET ?
                ''', (limit, offset))
            
            articles = [dict(row) for row in cursor.fetchall()]
        
        conn.close()
        return articles
    
    def get_article_by_id(self, article_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –ø–æ ID"""
        conn = sqlite3.connect(self.db_name)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM newspaper_articles WHERE id = ?', (article_id,))
        row = cursor.fetchone()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if row:
            try:
                cursor.execute('UPDATE newspaper_articles SET views = views + 1 WHERE id = ?', (article_id,))
                conn.commit()
            except sqlite3.OperationalError:
                # –ö–æ–ª–æ–Ω–∫–∞ views –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                pass
        
        conn.close()
        
        return dict(row) if row else None
    
    def update_article(self, article_id: int, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        allowed_fields = ['title', 'content', 'author', 'category', 'image_url']
        updates = {k: v for k, v in kwargs.items() if k in allowed_fields}
        
        if not updates:
            return False
        
        set_clause = ', '.join([f"{k} = ?" for k in updates.keys()])
        values = list(updates.values()) + [article_id]
        
        cursor.execute(f'UPDATE newspaper_articles SET {set_clause} WHERE id = ?', values)
        conn.commit()
        
        success = cursor.rowcount > 0
        conn.close()
        
        return success
    
    def delete_article(self, article_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM newspaper_articles WHERE id = ?', (article_id,))
        conn.commit()
        
        success = cursor.rowcount > 0
        conn.close()
        
        if success:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ç—å—è #{article_id}")
        
        return success
    
    # ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø ====================
    
    def add_event(self, title: str, event_date: str, description: str = None,
                 event_time: str = None, location: str = None, 
                 category: str = None, is_recurring: bool = False,
                 recurrence_pattern: str = None) -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO calendar_events 
                (title, description, event_date, event_time, location, category, 
                 is_recurring, recurrence_pattern)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (title, description, event_date, event_time, location, category,
                  is_recurring, recurrence_pattern))
        except sqlite3.OperationalError:
            # –ï—Å–ª–∏ –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            cursor.execute('''
                INSERT INTO calendar_events 
                (title, description, event_date, event_time, location, category)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (title, description, event_date, event_time, location, category))
        
        event_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        logger.info(f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ #{event_id}: {title} –Ω–∞ {event_date}")
        return event_id
    
    def get_events(self, start_date: str = None, end_date: str = None,
                  category: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        conn = sqlite3.connect(self.db_name)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        query = 'SELECT * FROM calendar_events WHERE 1=1'
        params = []
        
        if start_date:
            query += ' AND event_date >= ?'
            params.append(start_date)
        
        if end_date:
            query += ' AND event_date <= ?'
            params.append(end_date)
        
        if category:
            query += ' AND category = ?'
            params.append(category)
        
        query += ' ORDER BY event_date, event_time'
        
        cursor.execute(query, params)
        events = [dict(row) for row in cursor.fetchall()]
        conn.close()
        
        return events
    
    def get_upcoming_events(self, days: int = 7, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
        today = datetime.now().date().isoformat()
        end_date = (datetime.now() + timedelta(days=days)).date().isoformat()
        
        conn = sqlite3.connect(self.db_name)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM calendar_events 
            WHERE event_date >= ? AND event_date <= ?
            ORDER BY event_date, event_time
            LIMIT ?
        ''', (today, end_date, limit))
        
        events = [dict(row) for row in cursor.fetchall()]
        conn.close()
        
        return events
    
    def update_event(self, event_id: int, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        cursor.execute("PRAGMA table_info(calendar_events)")
        existing_columns = [column[1] for column in cursor.fetchall()]
        
        allowed_fields = ['title', 'description', 'event_date', 'event_time',
                         'location', 'category', 'is_recurring', 'recurrence_pattern']
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        updates = {k: v for k, v in kwargs.items() 
                  if k in allowed_fields and k in existing_columns}
        
        if not updates:
            return False
        
        set_clause = ', '.join([f"{k} = ?" for k in updates.keys()])
        values = list(updates.values()) + [event_id]
        
        cursor.execute(f'UPDATE calendar_events SET {set_clause} WHERE id = ?', values)
        conn.commit()
        
        success = cursor.rowcount > 0
        conn.close()
        
        return success
    
    def delete_event(self, event_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM calendar_events WHERE id = ?', (event_id,))
        conn.commit()
        
        success = cursor.rowcount > 0
        conn.close()
        
        if success:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ #{event_id}")
        
        return success
    
    # ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò ====================
    
    def save_feedback(self, user_name: str = None, department: str = None,
                     phone: str = None, message: str = None, 
                     category: str = 'general') -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO feedback (user_name, department, phone, message, category)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_name, department, phone, message, category))
        
        feedback_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        logger.info(f"üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å #{feedback_id} –æ—Ç {user_name} ({department})")
        return feedback_id
    
    def get_feedback(self, status: str = None, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        conn = sqlite3.connect(self.db_name)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        try:
            if status:
                cursor.execute('''
                    SELECT * FROM feedback 
                    WHERE status = ?
                    ORDER BY created_at DESC 
                    LIMIT ?
                ''', (status, limit))
            else:
                cursor.execute('''
                    SELECT * FROM feedback 
                    ORDER BY created_at DESC 
                    LIMIT ?
                ''', (limit,))
        except sqlite3.OperationalError:
            # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ status –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute('''
                SELECT * FROM feedback 
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (limit,))
        
        feedback = [dict(row) for row in cursor.fetchall()]
        conn.close()
        
        return feedback
    
    def update_feedback_status(self, feedback_id: int, status: str, 
                              response: str = None) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        try:
            if response:
                cursor.execute('''
                    UPDATE feedback 
                    SET status = ?, response = ?, responded_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                ''', (status, response, feedback_id))
            else:
                cursor.execute('''
                    UPDATE feedback 
                    SET status = ?
                    WHERE id = ?
                ''', (status, feedback_id))
        except sqlite3.OperationalError:
            # –ï—Å–ª–∏ –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ - –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            return False
        
        conn.commit()
        success = cursor.rowcount > 0
        conn.close()
        
        return success
    
    # ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò ====================
    
    def log_action(self, user_id: str = None, action: str = None,
                   details: str = None, ip_address: str = None,
                   user_agent: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO usage_analytics (user_id, action, details, ip_address, user_agent)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, action, details, ip_address, user_agent))
        
        conn.commit()
        conn.close()
    
    def get_analytics(self, user_id: str = None, action: str = None,
                     days: int = 7) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        conn = sqlite3.connect(self.db_name)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cutoff_date = (datetime.now() - timedelta(days=days)).isoformat()
        
        query = 'SELECT * FROM usage_analytics WHERE created_at >= ?'
        params = [cutoff_date]
        
        if user_id:
            query += ' AND user_id = ?'
            params.append(user_id)
        
        if action:
            query += ' AND action = ?'
            params.append(action)
        
        query += ' ORDER BY created_at DESC'
        
        cursor.execute(query, params)
        analytics = [dict(row) for row in cursor.fetchall()]
        conn.close()
        
        return analytics
    
    def get_analytics_summary(self, days: int = 7) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cutoff_date = (datetime.now() - timedelta(days=days)).isoformat()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
        cursor.execute('''
            SELECT COUNT(*) as total_actions,
                   COUNT(DISTINCT user_id) as unique_users,
                   COUNT(DISTINCT DATE(created_at)) as active_days
            FROM usage_analytics
            WHERE created_at >= ?
        ''', (cutoff_date,))
        
        summary = dict(cursor.fetchone())
        
        # –¢–æ–ø –¥–µ–π—Å—Ç–≤–∏–π
        cursor.execute('''
            SELECT action, COUNT(*) as count
            FROM usage_analytics
            WHERE created_at >= ?
            GROUP BY action
            ORDER BY count DESC
            LIMIT 10
        ''', (cutoff_date,))
        
        summary['top_actions'] = [dict(row) for row in cursor.fetchall()]
        
        conn.close()
        
        return summary
    
    # ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö ====================
    
    def get_setting(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('SELECT value FROM app_settings WHERE key = ?', (key,))
        row = cursor.fetchone()
        conn.close()
        
        return row[0] if row else None
    
    def set_setting(self, key: str, value: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO app_settings (key, value, updated_at)
            VALUES (?, ?, CURRENT_TIMESTAMP)
        ''', (key, value))
        
        conn.commit()
        conn.close()
    
    def get_all_settings(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        conn = sqlite3.connect(self.db_name)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('SELECT key, value FROM app_settings')
        settings = {row['key']: row['value'] for row in cursor.fetchall()}
        conn.close()
        
        return settings
