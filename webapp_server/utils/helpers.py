"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
"""
import os
import json
import hashlib
import logging
from datetime import datetime, timedelta
from functools import wraps
from flask import jsonify, request, make_response
import requests
from typing import Dict, List, Optional, Any

logger = logging.getLogger(__name__)


# ==================== –î–ï–ö–û–†–ê–¢–û–†–´ ====================

def rate_limit(max_calls: int = 60, window_seconds: int = 60):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    def decorator(f):
        calls = {}
        
        @wraps(f)
        def wrapped(*args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
            client_ip = request.remote_addr or 'unknown'
            now = datetime.now()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            cutoff = now - timedelta(seconds=window_seconds)
            calls[client_ip] = [
                call_time for call_time in calls.get(client_ip, [])
                if call_time > cutoff
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(calls.get(client_ip, [])) >= max_calls:
                return jsonify({
                    'success': False,
                    'error': 'Rate limit exceeded'
                }), 429
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–∑–æ–≤
            if client_ip not in calls:
                calls[client_ip] = []
            calls[client_ip].append(now)
            
            return f(*args, **kwargs)
        
        return wrapped
    return decorator


def async_task(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    @wraps(f)
    def wrapped(*args, **kwargs):
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Celery –∏–ª–∏ threading
        try:
            return f(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ: {e}")
            return None
    return wrapped


def cache_result(ttl_seconds: int = 3600):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    cache = {}
    
    def decorator(f):
        @wraps(f)
        def wrapped(*args, **kwargs):
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
            cache_key = f"{f.__name__}:{str(args)}:{str(kwargs)}"
            now = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache_key in cache:
                cached_value, cached_time = cache[cache_key]
                if now - cached_time < timedelta(seconds=ttl_seconds):
                    logger.debug(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞: {cache_key}")
                    return cached_value
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = f(*args, **kwargs)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            cache[cache_key] = (result, now)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            cutoff = now - timedelta(seconds=ttl_seconds * 2)
            for key in list(cache.keys()):
                _, cached_time = cache[key]
                if cached_time < cutoff:
                    del cache[key]
            
            return result
        
        return wrapped
    return decorator


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö ====================

def register_error_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ –¥–ª—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    @app.errorhandler(400)
    def bad_request(error):
        return jsonify({
            'success': False,
            'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å'
        }), 400
    
    @app.errorhandler(401)
    def unauthorized(error):
        return jsonify({
            'success': False,
            'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        }), 401
    
    @app.errorhandler(403)
    def forbidden(error):
        return jsonify({
            'success': False,
            'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω'
        }), 403
    
    @app.errorhandler(404)
    def not_found(error):
        return jsonify({
            'success': False,
            'error': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }), 404
    
    @app.errorhandler(413)
    def too_large(error):
        return jsonify({
            'success': False,
            'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
        }), 413
    
    @app.errorhandler(429)
    def rate_limit_exceeded(error):
        return jsonify({
            'success': False,
            'error': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
        }), 429
    
    @app.errorhandler(500)
    def internal_error(error):
        logger.error(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500
    
    @app.errorhandler(Exception)
    def handle_exception(error):
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {error}", exc_info=True)
        return jsonify({
            'success': False,
            'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞'
        }), 500


# ==================== MIDDLEWARE ====================

def setup_middleware(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    @app.before_request
    def handle_preflight():
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ preflight OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if request.method == "OPTIONS":
            response = make_response()
            response.headers.add("Access-Control-Allow-Origin", "*")
            response.headers.add('Access-Control-Allow-Headers', "*")
            response.headers.add('Access-Control-Allow-Methods', "*")
            return response
    
    @app.after_request
    def after_request(response):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫ –æ—Ç–≤–µ—Ç–∞–º"""
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
        response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
        return response
    
    @app.before_request
    def log_request():
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        logger.debug(f"üì• {request.method} {request.path} from {request.remote_addr}")
    
    @app.after_request
    def log_response(response):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        logger.debug(f"üì§ {response.status_code} for {request.method} {request.path}")
        return response


# ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø ====================

def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = ''.join(filter(str.isdigit, phone))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä)
    if len(digits) == 11 and digits[0] in ['7', '8']:
        return True
    elif len(digits) == 10:
        return True
    
    return False


def validate_email(email: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email"""
    import re
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None


def sanitize_input(text: str, max_length: int = 1000) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not text:
        return ""
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    text = text[:max_length]
    
    # –£–±–∏—Ä–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    dangerous_chars = ['<', '>', '"', "'", '&', '\x00']
    for char in dangerous_chars:
        text = text.replace(char, '')
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = ' '.join(text.split())
    
    return text.strip()


# ==================== –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò ====================

def ensure_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = [
        'templates',
        'static/css',
        'static/js',
        'static/images',
        'uploads',
        'backups',
        'logs'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        logger.debug(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} –≥–æ—Ç–æ–≤–∞")


def cleanup_old_files(directory: str, days: int = 30):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    if not os.path.exists(directory):
        return 0
    
    cutoff = datetime.now() - timedelta(days=days)
    removed = 0
    
    for filename in os.listdir(directory):
        filepath = os.path.join(directory, filename)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if os.path.isdir(filepath):
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        mtime = datetime.fromtimestamp(os.path.getmtime(filepath))
        if mtime < cutoff:
            try:
                os.remove(filepath)
                removed += 1
                logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {filename}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
    
    return removed


def get_file_hash(filepath: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞"""
    hash_md5 = hashlib.md5()
    
    with open(filepath, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    
    return hash_md5.hexdigest()


# ==================== –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò ====================

def format_datetime(dt: datetime, format: str = '%d.%m.%Y %H:%M') -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if isinstance(dt, str):
        try:
            dt = datetime.fromisoformat(dt)
        except:
            return dt
    
    return dt.strftime(format)


def parse_datetime(date_string: str) -> Optional[datetime]:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤ datetime"""
    formats = [
        '%Y-%m-%d %H:%M:%S',
        '%Y-%m-%d %H:%M',
        '%Y-%m-%d',
        '%d.%m.%Y %H:%M:%S',
        '%d.%m.%Y %H:%M',
        '%d.%m.%Y',
        '%d/%m/%Y',
        '%Y-%m-%dT%H:%M:%S',
        '%Y-%m-%dT%H:%M:%SZ'
    ]
    
    for fmt in formats:
        try:
            return datetime.strptime(date_string, fmt)
        except ValueError:
            continue
    
    return None


def truncate_text(text: str, max_length: int = 100, suffix: str = '...') -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞"""
    if not text or len(text) <= max_length:
        return text
    
    return text[:max_length - len(suffix)] + suffix


def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.2f} {unit}"
        size_bytes /= 1024.0
    
    return f"{size_bytes:.2f} TB"


# ==================== –°–ï–¢–ï–í–´–ï –§–£–ù–ö–¶–ò–ò ====================

def get_client_ip(request) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∫–ª–∏–µ–Ω—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
    if request.headers.get('X-Forwarded-For'):
        return request.headers['X-Forwarded-For'].split(',')[0].strip()
    elif request.headers.get('X-Real-IP'):
        return request.headers['X-Real-IP']
    else:
        return request.remote_addr or 'unknown'


def test_proxy(proxy_url: str, timeout: int = 5) -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        test_url = 'http://httpbin.org/ip'
        proxies = {
            'http': proxy_url,
            'https': proxy_url
        }
        
        response = requests.get(test_url, proxies=proxies, timeout=timeout)
        return response.status_code == 200
    except:
        return False


# ==================== –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–Ø ====================

def generate_token(length: int = 32) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    import secrets
    return secrets.token_hex(length // 2)


def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    import bcrypt
    salt = bcrypt.gensalt()
    return bcrypt.hashpw(password.encode('utf-8'), salt).decode('utf-8')


def verify_password(password: str, hashed: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    import bcrypt
    return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))


# ==================== –ú–û–ù–ò–¢–û–†–ò–ù–ì ====================

def get_system_info() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    import platform
    import psutil
    
    return {
        'platform': platform.system(),
        'platform_version': platform.version(),
        'architecture': platform.machine(),
        'python_version': platform.python_version(),
        'cpu_percent': psutil.cpu_percent(interval=1),
        'memory_percent': psutil.virtual_memory().percent,
        'disk_usage': psutil.disk_usage('/').percent
    }


def check_dependencies() -> Dict[str, bool]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    dependencies = {
        'flask': False,
        'requests': False,
        'sqlite3': False,
        'logging': False
    }
    
    for module_name in dependencies.keys():
        try:
            __import__(module_name)
            dependencies[module_name] = True
        except ImportError:
            dependencies[module_name] = False
    
    return dependencies
