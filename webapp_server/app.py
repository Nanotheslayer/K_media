"""
–ì–ª–∞–≤–Ω–æ–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Telegram Web App –ö–∏—Ä–æ–≤–µ—Ü –ú–µ–¥–∏–∞
"""
import os
import sys
import logging
from flask import Flask
from flask_cors import CORS

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from webapp_server.config import (
    PORT, DEBUG, SECRET_KEY, MAX_CONTENT_LENGTH, 
    UPLOAD_FOLDER, CORS_ORIGINS, CORS_METHODS, CORS_HEADERS,
    LOG_FILE, LOG_LEVEL, LOG_FORMAT,
    APP_NAME, APP_VERSION
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format=LOG_FORMAT,
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler(LOG_FILE, encoding='utf-8')  # –í—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)


def create_app():
    """–§–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask"""
    logger.info(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è {APP_NAME} v{APP_VERSION}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask
    app = Flask(__name__, 
                template_folder='../templates',
                static_folder='../static',
                static_url_path='/static')
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.config['SECRET_KEY'] = SECRET_KEY
    app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH
    app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    CORS(app, resources={
        r"/api/*": {
            "origins": CORS_ORIGINS,
            "methods": CORS_METHODS,
            "allow_headers": CORS_HEADERS
        }
    })
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    initialize_components(app)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è blueprints
    register_blueprints(app)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
    setup_app_handlers(app)
    
    logger.info(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {APP_NAME} —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    return app


def initialize_components(app):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    from webapp_server.managers import key_manager, proxy_manager, user_manager
    from webapp_server.services import gemini_client
    from webapp_server.database import webapp_db
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    with app.app_context():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
        keys_status = key_manager.get_keys_status()
        logger.info(f"üîë API –∫–ª—é—á–∏: {keys_status['available_keys']}/{keys_status['total_keys']} –¥–æ—Å—Ç—É–ø–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
        proxy_stats = proxy_manager.get_proxy_stats()
        logger.info(f"üåê –ü—Ä–æ–∫—Å–∏: {proxy_stats['available_proxies']}/{proxy_stats['total_proxies']} –¥–æ—Å—Ç—É–ø–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            test_setting = webapp_db.get_setting('test')
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ app.config –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    app.config['key_manager'] = key_manager
    app.config['proxy_manager'] = proxy_manager
    app.config['user_manager'] = user_manager
    app.config['gemini_client'] = gemini_client
    app.config['webapp_db'] = webapp_db


def register_blueprints(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö blueprints"""
    logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
    
    from webapp_server.routes.main_routes import main_bp
    from webapp_server.routes.chat_routes import chat_bp
    from webapp_server.routes.admin_routes import admin_bp
    from webapp_server.routes.api_routes import api_bp
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º blueprints
    app.register_blueprint(main_bp)
    app.register_blueprint(chat_bp, url_prefix='/api')
    app.register_blueprint(admin_bp, url_prefix='/api/admin')
    app.register_blueprint(api_bp, url_prefix='/api')
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(app.url_map._rules)}")
    
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ debug —Ä–µ–∂–∏–º–µ
    if DEBUG:
        logger.debug("üìã –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
        for rule in app.url_map.iter_rules():
            logger.debug(f"  {rule.endpoint}: {rule.rule} [{', '.join(rule.methods)}]")


def setup_app_handlers(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""
    logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    from webapp_server.utils.helpers import register_error_handlers, setup_middleware
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    register_error_handlers(app)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
    setup_middleware(app)
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")


def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    from webapp_server.utils.helpers import ensure_directories
    ensure_directories()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        'templates/index.html',
        'static/js/app.js',
        'static/js/chat.js',
        'static/css/styles.css'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_warnings = []
    
    if not os.getenv('BOT_TOKEN'):
        env_warnings.append("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å)")
    
    if not os.getenv('ADMIN_ID'):
        env_warnings.append("ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)")
    
    for warning in env_warnings:
        logger.warning(f"‚ö†Ô∏è {warning}")
    
    logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def print_startup_info():
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    from webapp_server.managers import key_manager, proxy_manager
    
    print("\n" + "="*60)
    print(f"üöÄ {APP_NAME} v{APP_VERSION}")
    print("="*60)
    print(f"üìç –ü–æ—Ä—Ç: {PORT}")
    print(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {DEBUG}")
    print(f"üïµÔ∏è –ú–æ–¥–µ–ª—å —á–∞—Ç–∞: Gemini 2.5 Pro")
    print("="*60)
    
    # –°—Ç–∞—Ç—É—Å –∫–ª—é—á–µ–π
    keys_status = key_manager.get_keys_status()
    print(f"üîë API –∫–ª—é—á–∏: {keys_status['available_keys']}/{keys_status['total_keys']} –¥–æ—Å—Ç—É–ø–Ω–æ")
    
    if keys_status['all_keys_unavailable']:
        print("   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ API –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
    
    # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏
    proxy_stats = proxy_manager.get_proxy_stats()
    print(f"üåê –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—ã: {proxy_stats['available_proxies']}/{proxy_stats['total_proxies']} –¥–æ—Å—Ç—É–ø–Ω–æ")
    
    for proxy_detail in proxy_stats['details'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        status_emoji = "‚úÖ" if proxy_detail['status'] == 'available' else "‚è∞" if proxy_detail['status'] == 'cooldown' else "üö´"
        print(f"   {status_emoji} {proxy_detail['name']}: {proxy_detail['status']}")
    
    if len(proxy_stats['details']) > 3:
        print(f"   ... –∏ –µ—â—ë {len(proxy_stats['details']) - 3} –ø—Ä–æ–∫—Å–∏")
    
    print("="*60)
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  üè† /            - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    print("  üí¨ /api/chat    - API —á–∞—Ç–∞ –®–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏–Ω")
    print("  üì∞ /api/newspaper - –ì–∞–∑–µ—Ç–∞ –ö–∏—Ä–æ–≤–µ—Ü")
    print("  üìÖ /api/events  - –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π")
    print("  üìù /api/feedback - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    print("  üîß /health      - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    print("="*60)
    
    if proxy_stats['available_proxies'] == 0:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:{PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("="*60 + "\n")


def run_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        check_environment()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = create_app()
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
        print_startup_info()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://0.0.0.0:{PORT}")
        app.run(host='0.0.0.0', port=PORT, debug=DEBUG)
        
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
        sys.exit(1)


if __name__ == '__main__':
    run_server()
