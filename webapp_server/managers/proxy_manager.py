"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
"""
import os
import json
import time
import logging
from typing import Dict, List, Optional, Set

logger = logging.getLogger(__name__)


class ProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, config_file: str = "proxy_config.json"):
        self.config_file = config_file
        self.proxies = []
        self.settings = {}
        self.proxy_stats = {}
        self.current_proxy_index = 0
        self.blocked_proxies: Set[int] = set()
        self.proxy_cooldowns: Dict[str, float] = {}  # proxy_name -> end_time
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._initialize_stats()
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
                self.proxies = [
                    proxy for proxy in config.get('proxies', [])
                    if proxy.get('enabled', True)
                ]
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                self.proxies.sort(key=lambda x: x.get('priority', 999))
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self.settings = config.get('settings', {})
                
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.proxies)} –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            else:
                # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                self._create_default_config()
                self._load_config()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                
        except Exception as e:
            logger.error(f"‚åõ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            self._use_fallback_config()
    
    def _create_default_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø"""
        default_config = {
            "proxies": [
                {
                    "name": "Primary Proxy",
                    "http": "http://motuoom:123456@179.60.183.214:50101",
                    "https": "http://motuoom:123456@179.60.183.214:50101",
                    "enabled": True,
                    "priority": 1
                }
            ],
            "settings": {
                "enable_direct_connection_fallback": True,
                "proxy_rotation_enabled": True,
                "max_consecutive_errors": 3,
                "cooldown_duration_seconds": 600,  # 10 –º–∏–Ω—É—Ç
                "success_score_bonus": 1,
                "error_score_penalty": -5
            }
        }
        
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(default_config, f, indent=2, ensure_ascii=False)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.config_file}")
        except Exception as e:
            logger.error(f"‚åõ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def _use_fallback_config(self):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        self.proxies = [
            {
                "name": "Fallback Proxy",
                "http": "http://motuoom:123456@179.60.183.214:50101",
                "https": "http://motuoom:123456@179.60.183.214:50101",
                "enabled": True,
                "priority": 1
            }
        ]
        self.settings = {
            "enable_direct_connection_fallback": True,
            "proxy_rotation_enabled": True,
            "max_consecutive_errors": 3,
            "cooldown_duration_seconds": 600
        }
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏")
    
    def _initialize_stats(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
        for index, proxy in enumerate(self.proxies):
            self.proxy_stats[index] = {
                'name': proxy.get('name', f'Proxy_{index}'),
                'requests': 0,
                'errors': 0,
                'consecutive_errors': 0,
                'last_success': None,
                'last_error': None,
                'score': 100  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            }
    
    def get_next_proxy(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∫—É–ª–¥–∞—É–Ω–æ–≤"""
        if not self.proxies:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return self._get_direct_connection()
        
        current_time = time.time()
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫—É–ª–¥–∞—É–Ω—ã
        self.proxy_cooldowns = {
            name: end_time for name, end_time in self.proxy_cooldowns.items()
            if end_time > current_time
        }
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–∫—Å–∏
        attempts = 0
        max_attempts = len(self.proxies) * 2
        
        while attempts < max_attempts:
            attempts += 1
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ä–æ—Ç–∞—Ü–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            if self.settings.get('proxy_rotation_enabled', True):
                self.current_proxy_index = (self.current_proxy_index + 1) % len(self.proxies)
            
            proxy_index = self.current_proxy_index
            proxy = self.proxies[proxy_index]
            proxy_name = self.proxy_stats[proxy_index]['name']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø—Ä–æ–∫—Å–∏
            if proxy_index in self.blocked_proxies:
                logger.debug(f"üö´ –ü—Ä–æ–∫—Å–∏ {proxy_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if proxy_name in self.proxy_cooldowns:
                remaining = int(self.proxy_cooldowns[proxy_name] - current_time)
                logger.debug(f"‚è∞ –ü—Ä–æ–∫—Å–∏ {proxy_name} –≤ –∫—É–ª–¥–∞—É–Ω–µ –µ—â–µ {remaining} —Å–µ–∫")
                continue
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Å–∏
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_name}")
            return {
                'index': proxy_index,
                'name': proxy_name,
                'proxies': {
                    'http': proxy.get('http'),
                    'https': proxy.get('https')
                }
            }
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        logger.warning("‚ö†Ô∏è –í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return self._get_direct_connection()
    
    def _get_direct_connection(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.settings.get('enable_direct_connection_fallback', True):
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)")
            return {
                'index': -1,
                'name': 'Direct Connection',
                'proxies': None  # None –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            }
        return None
    
    def report_success(self, proxy_index: int):
        """–°–æ–æ–±—â–∏—Ç—å –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
        if proxy_index == -1:  # –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            return
            
        if proxy_index in self.proxy_stats:
            stats = self.proxy_stats[proxy_index]
            stats['requests'] += 1
            stats['consecutive_errors'] = 0
            stats['last_success'] = time.time()
            stats['score'] = min(100, stats['score'] + self.settings.get('success_score_bonus', 1))
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –±—ã–ª —Ç–∞–º
            self.blocked_proxies.discard(proxy_index)
            
            logger.debug(f"‚úÖ –ü—Ä–æ–∫—Å–∏ {stats['name']} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å")
    
    def report_error(self, proxy_index: int, error_code: Optional[int] = None):
        """–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏"""
        if proxy_index == -1:  # –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            return
            
        if proxy_index in self.proxy_stats:
            stats = self.proxy_stats[proxy_index]
            stats['requests'] += 1
            stats['errors'] += 1
            stats['consecutive_errors'] += 1
            stats['last_error'] = time.time()
            stats['score'] = max(0, stats['score'] + self.settings.get('error_score_penalty', -5))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏
            max_errors = self.settings.get('max_consecutive_errors', 3)
            
            if stats['consecutive_errors'] >= max_errors:
                self.blocked_proxies.add(proxy_index)
                logger.warning(f"üö´ –ü—Ä–æ–∫—Å–∏ {stats['name']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ {max_errors} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—É–ª–¥–∞—É–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ 429
            if error_code == 429:
                cooldown_duration = self.settings.get('cooldown_duration_seconds', 600)
                self.proxy_cooldowns[stats['name']] = time.time() + cooldown_duration
                logger.warning(f"‚è∞ –ü—Ä–æ–∫—Å–∏ {stats['name']} –≤ –∫—É–ª–¥–∞—É–Ω–µ –Ω–∞ {cooldown_duration} —Å–µ–∫—É–Ω–¥ (429 error)")
    
    def get_proxy_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º –ø—Ä–æ–∫—Å–∏"""
        current_time = time.time()
        
        stats_summary = {
            'total_proxies': len(self.proxies),
            'available_proxies': 0,
            'blocked_proxies': len(self.blocked_proxies),
            'cooldown_proxies': len(self.proxy_cooldowns),
            'direct_connection_enabled': self.settings.get('enable_direct_connection_fallback', True),
            'details': []
        }
        
        for index, stats in self.proxy_stats.items():
            is_blocked = index in self.blocked_proxies
            is_cooldown = stats['name'] in self.proxy_cooldowns
            is_available = not (is_blocked or is_cooldown)
            
            if is_available:
                stats_summary['available_proxies'] += 1
            
            cooldown_remaining = 0
            if is_cooldown:
                cooldown_remaining = max(0, self.proxy_cooldowns[stats['name']] - current_time)
            
            stats_summary['details'].append({
                'name': stats['name'],
                'index': index,
                'requests': stats['requests'],
                'errors': stats['errors'],
                'success_rate': round((stats['requests'] - stats['errors']) / max(stats['requests'], 1) * 100, 1) if stats['requests'] > 0 else 100,
                'consecutive_errors': stats['consecutive_errors'],
                'status': 'blocked' if is_blocked else 'cooldown' if is_cooldown else 'available',
                'cooldown_remaining': int(cooldown_remaining) if cooldown_remaining > 0 else 0,
                'last_success': time.strftime('%H:%M:%S', time.localtime(stats['last_success'])) if stats['last_success'] else 'Never',
                'last_error': time.strftime('%H:%M:%S', time.localtime(stats['last_error'])) if stats['last_error'] else 'Never'
            })
        
        return stats_summary
    
    def reload_config(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏"""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏...")
        old_proxy_count = len(self.proxies)
        
        self._load_config()
        self._initialize_stats()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_proxy_index = 0
        self.blocked_proxies.clear()
        self.proxy_cooldowns.clear()
        
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞: {old_proxy_count} -> {len(self.proxies)} –ø—Ä–æ–∫—Å–∏")
