"""
–ú–µ–Ω–µ–¥–∂–µ—Ä API –∫–ª—é—á–µ–π —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –∏–∑ webapp_kyrov_server.py
"""
import os
import json
import time
import random
import logging
from typing import Dict, List, Optional, Set
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class KeyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä API –∫–ª—é—á–µ–π —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

    def __init__(self):
        self.keys_file = 'api_keys_state.json'
        self.keys = self._load_keys()
        self.current_key_index = 0
        self.blocked_keys: Set[str] = set()
        self.key_cooldowns: Dict[str, float] = {}  # key -> end_time
        self._load_state()

    def _load_keys(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ config
        from webapp_server.config import PREMIUM_UNLIMITED_KEYS
        
        keys = PREMIUM_UNLIMITED_KEYS.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        env_keys = os.getenv('GEMINI_API_KEYS', '').split(',')
        for key in env_keys:
            key = key.strip()
            if key and key not in keys:
                keys.append(key)
        
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(keys)} API –∫–ª—é—á–µ–π")
        return keys

    def _load_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª—é—á–µ–π"""
        try:
            if os.path.exists(self.keys_file):
                with open(self.keys_file, 'r') as f:
                    state = json.load(f)
                    self.blocked_keys = set(state.get('blocked_keys', []))
                    self.key_cooldowns = {
                        k: v for k, v in state.get('key_cooldowns', {}).items()
                        if v > time.time()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ª–¥–∞—É–Ω—ã
                    }
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {len(self.blocked_keys)} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, "
                               f"{len(self.key_cooldowns)} –≤ –∫—É–ª–¥–∞—É–Ω–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª—é—á–µ–π: {e}")

    def _save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª—é—á–µ–π"""
        try:
            state = {
                'blocked_keys': list(self.blocked_keys),
                'key_cooldowns': self.key_cooldowns,
                'last_updated': time.time()
            }
            with open(self.keys_file, 'w') as f:
                json.dump(state, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª—é—á–µ–π: {e}")

    def get_next_available_key(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ API –∫–ª—é—á–∞ - –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê"""
        if not self.keys:
            logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π")
            return None

        current_time = time.time()
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫—É–ª–¥–∞—É–Ω—ã
        self.key_cooldowns = {
            key: end_time for key, end_time in self.key_cooldowns.items()
            if end_time > current_time
        }

        # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–±–æ—Ä –∫–ª—é—á–µ–π –ø–æ –∫—Ä—É–≥—É
        attempts = 0
        max_attempts = len(self.keys)

        while attempts < max_attempts:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
            key = self.keys[self.current_key_index]
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–ª—é—á—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
            self.current_key_index = (self.current_key_index + 1) % len(self.keys)
            attempts += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if key in self.blocked_keys:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if key in self.key_cooldowns:
                remaining = int(self.key_cooldowns[key] - current_time)
                if remaining > 0:
                    logger.debug(f"–ö–ª—é—á –≤ –∫—É–ª–¥–∞—É–Ω–µ –µ—â–µ {remaining} —Å–µ–∫")
                    continue
            
            logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á ...{key[-10:]}")
            return key

        logger.error("–í—Å–µ API –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return None

    def block_key(self, key: str, duration_minutes: int = 10):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª—é—á–∞ –Ω–∞ 10 –º–∏–Ω—É—Ç (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
        if key in self.keys:
            self.key_cooldowns[key] = time.time() + (duration_minutes * 60)
            logger.warning(f"üîí –ö–ª—é—á ...{key[-10:]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç")
            self._save_state()

    def permanently_block_key(self, key: str):
        """–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª—é—á–∞"""
        if key in self.keys:
            self.blocked_keys.add(key)
            logger.error(f"‚õî –ö–ª—é—á ...{key[-10:]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞")
            self._save_state()

    def unblock_key(self, key: str):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª—é—á–∞"""
        if key in self.blocked_keys:
            self.blocked_keys.remove(key)
        if key in self.key_cooldowns:
            del self.key_cooldowns[key]
        logger.info(f"üîì –ö–ª—é—á ...{key[-10:]} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        self._save_state()

    def report_key_error(self, key: str, error_code: Optional[int] = None):
        """–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ - –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê"""
        if error_code == 429:  # Rate limit - –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç
            self.block_key(key, duration_minutes=10)
        elif error_code == 403:  # Forbidden - –≤–æ–∑–º–æ–∂–Ω–æ –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
            self.permanently_block_key(key)
        elif error_code == 400:  # Bad request - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç
            self.block_key(key, duration_minutes=5)

    def get_keys_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π"""
        current_time = time.time()
        
        available_keys = 0
        blocked_keys = len(self.blocked_keys)
        cooldown_keys = 0
        
        for key in self.keys:
            if key in self.blocked_keys:
                continue
            elif key in self.key_cooldowns and self.key_cooldowns[key] > current_time:
                cooldown_keys += 1
            else:
                available_keys += 1
        
        return {
            'total_keys': len(self.keys),
            'available_keys': available_keys,
            'blocked_keys': blocked_keys,
            'cooldown_keys': cooldown_keys,
            'all_keys_unavailable': available_keys == 0,
            'details': self._get_detailed_status()
        }

    def _get_detailed_status(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º –∫–ª—é—á–µ"""
        current_time = time.time()
        details = []
        
        for i, key in enumerate(self.keys):
            status = 'available'
            cooldown_remaining = 0
            
            if key in self.blocked_keys:
                status = 'blocked'
            elif key in self.key_cooldowns:
                if self.key_cooldowns[key] > current_time:
                    status = 'cooldown'
                    cooldown_remaining = int(self.key_cooldowns[key] - current_time)
            
            details.append({
                'index': i,
                'key_suffix': f"...{key[-10:]}",
                'status': status,
                'cooldown_remaining': cooldown_remaining
            })
        
        return details

    def cleanup_cooldowns(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫—É–ª–¥–∞—É–Ω–æ–≤"""
        current_time = time.time()
        before = len(self.key_cooldowns)
        
        self.key_cooldowns = {
            key: end_time for key, end_time in self.key_cooldowns.items()
            if end_time > current_time
        }
        
        after = len(self.key_cooldowns)
        if before != after:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {before - after} –∏—Å—Ç–µ–∫—à–∏—Ö –∫—É–ª–¥–∞—É–Ω–æ–≤")
            self._save_state()

    def rotate_keys(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π - –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞"""
        self.current_key_index = 0
        logger.info("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π")
