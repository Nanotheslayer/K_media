"""
–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import logging
from flask import Blueprint, render_template, send_from_directory, jsonify
from datetime import datetime

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
main_bp = Blueprint('main', __name__)


@main_bp.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Web App"""
    try:
        return render_template('index.html')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
        }), 500


@main_bp.route('/static/<path:filename>')
def static_files(filename):
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        return send_from_directory('static', filename)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return jsonify({
            'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }), 404


@main_bp.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    from webapp_server.managers import key_manager, proxy_manager
    from webapp_server.config import APP_VERSION, APP_NAME
    
    try:
        keys_status = key_manager.get_keys_status()
        proxy_stats = proxy_manager.get_proxy_stats()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        is_healthy = (
            not keys_status['all_keys_unavailable'] and 
            (proxy_stats['available_proxies'] > 0 or 
             proxy_stats.get('direct_connection_enabled', True))
        )
        
        return jsonify({
            'status': 'healthy' if is_healthy else 'degraded',
            'timestamp': datetime.now().isoformat(),
            'service': APP_NAME,
            'version': APP_VERSION,
            'chat_available': is_healthy,
            'details': {
                'api_keys': f"{keys_status['available_keys']}/{keys_status['total_keys']} available",
                'proxies': f"{proxy_stats['available_proxies']}/{proxy_stats['total_proxies']} available",
                'direct_connection': proxy_stats.get('direct_connection_enabled', True),
                'blocked_proxies': proxy_stats['blocked_proxies'],
                'cooldown_proxies': proxy_stats['cooldown_proxies']
            },
            'recommendations': _get_system_recommendations(proxy_stats, keys_status)
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500


@main_bp.route('/test')
def test_endpoint():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    return jsonify({
        'status': 'ok',
        'message': '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'timestamp': datetime.now().isoformat()
    })


@main_bp.route('/version')
def version():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    from webapp_server.config import APP_VERSION, APP_NAME, APP_DESCRIPTION, FEATURES
    
    return jsonify({
        'name': APP_NAME,
        'version': APP_VERSION,
        'description': APP_DESCRIPTION,
        'features': FEATURES,
        'timestamp': datetime.now().isoformat()
    })


@main_bp.route('/robots.txt')
def robots_txt():
    """Robots.txt –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤"""
    return """User-agent: *
Disallow: /api/
Disallow: /admin/
Disallow: /static/
Allow: /
""", 200, {'Content-Type': 'text/plain'}


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def _get_system_recommendations(proxy_stats, keys_stats):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    recommendations = []
    
    if proxy_stats['available_proxies'] == 0:
        recommendations.append("üö® –ö—Ä–∏—Ç–∏—á–Ω–æ: –í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
    elif proxy_stats['available_proxies'] == 1:
        recommendations.append("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏ –¥–æ—Å—Ç—É–ø–µ–Ω - –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ")
    
    if keys_stats['all_keys_unavailable']:
        recommendations.append("üö® –ö—Ä–∏—Ç–∏—á–Ω–æ: –í—Å–µ API –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
    elif keys_stats['available_keys'] <= 1:
        recommendations.append("‚ö†Ô∏è –ú–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã")
    
    if proxy_stats['blocked_proxies'] > 2:
        recommendations.append("üìä –ú–Ω–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")
    
    if proxy_stats['cooldown_proxies'] > 0:
        recommendations.append(f"‚è∞ {proxy_stats['cooldown_proxies']} –ø—Ä–æ–∫—Å–∏ –≤ –∫—É–ª–¥–∞—É–Ω–µ")
    
    if not recommendations:
        recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")
    
    return recommendations
