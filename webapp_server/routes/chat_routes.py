"""
–ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —á–∞—Ç–∞ –®–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏–Ω
"""
import logging
from flask import Blueprint, request, jsonify
from webapp_server.managers import key_manager, user_manager, proxy_manager
from webapp_server.services import gemini_client
from webapp_server.services.image_processor import ImageProcessor
from webapp_server.database import webapp_db

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è —á–∞—Ç–∞
chat_bp = Blueprint('chat', __name__)


@chat_bp.route('/chat', methods=['POST'])
def chat_endpoint():
    """API –¥–ª—è —á–∞—Ç–∞ —Å –®–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏–Ω—ã–º —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ —á–∞—Ç—É")
        logger.info(f"Content-Type: {request.content_type}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
        has_image = 'image' in request.files
        logger.info(f"–ù–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {has_image}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        message = None
        user_id = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if request.is_json:
            # JSON –∑–∞–ø—Ä–æ—Å
            data = request.get_json(force=True) or {}
            message = data.get('message', '')
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            user_id = data.get('user_id') or data.get('telegram_user_id', '')
            logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ JSON")

        elif request.form:
            # Form data (multipart/form-data –∏–ª–∏ application/x-www-form-urlencoded)
            message = request.form.get('message', '')
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            user_id = request.form.get('user_id') or request.form.get('telegram_user_id', '')
            logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ form data")
            logger.info(f"Form data keys: {list(request.form.keys())}")
            logger.info(f"Form values: message='{message[:50] if message else 'empty'}', user_id='{user_id}'")

        else:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å JSON –¥–∞–∂–µ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ Content-Type
            try:
                data = request.get_json(force=True, silent=True) or {}
                message = data.get('message', '')
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                user_id = data.get('user_id') or data.get('telegram_user_id', '')
                logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–∞–∫ JSON")
            except:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å raw data
                import json
                try:
                    raw_data = request.get_data(as_text=True)
                    if raw_data:
                        data = json.loads(raw_data)
                        message = data.get('message', '')
                        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                        user_id = data.get('user_id') or data.get('telegram_user_id', '')
                        logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ raw data")
                except Exception as parse_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ raw data: {parse_error}")
                    pass

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è user_id
        if not user_id:
            user_id = request.headers.get('X-Telegram-User-Id')
            if user_id:
                logger.info("User ID –ø–æ–ª—É—á–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-User-Id")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not user_id:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω user_id –∏–ª–∏ telegram_user_id'
            }), 400

        if not message and not has_image:
            return jsonify({
                'success': False,
                'error': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
            }), 400

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(
            f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: user_id={user_id}, message_length={len(message) if message else 0}, has_image={has_image}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        image_data = None
        if has_image:
            try:
                image_file = request.files['image']
                logger.info(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_file.filename}")

                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                try:
                    image_file.seek(0, 2)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –∫–æ–Ω–µ—Ü
                    file_size = image_file.tell()
                    image_file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
                    logger.info(f"üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_size} –±–∞–π—Ç ({file_size / (1024 * 1024):.2f} MB)")
                except:
                    logger.info("üìè –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
                image_data, error = ImageProcessor.process_uploaded_image(image_file)

                if error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error}")
                    return jsonify({
                        'success': False,
                        'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error}'
                    }), 400

                if image_data:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                    image_info = ImageProcessor.get_image_info(image_data)
                    logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {image_info}")
                else:
                    logger.error("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    return jsonify({
                        'success': False,
                        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
                    }), 400

            except Exception as e:
                logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
                return jsonify({
                    'success': False,
                    'error': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
                }), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
        keys_status = key_manager.get_keys_status()
        if keys_status['all_keys_unavailable']:
            return jsonify({
                'success': False,
                'error': '–®–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
            }), 503

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = user_manager.get_user_settings(user_id)
        history = user_manager.get_gemini_formatted_history(user_id, limit=10)
        logger.info(f"User settings: {settings}")
        logger.info(f"History length: {len(history)}")

        logger.info(f"üïµÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}: {message[:50] if message else '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
        response_text, error = gemini_client.send_message(
            user_history=history,
            message=message,
            image_data=image_data,
            use_google_search=settings['use_google_search'],
            use_url_context=settings['use_url_context'],
            use_persona=settings['use_persona']
        )

        logger.info(f"Gemini response: error={error}, response_length={len(response_text) if response_text else 0}")

        if response_text and len(response_text) > 0:
            logger.info(f"üîç FALLBACK DEBUG - –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {repr(response_text[:100])}")

        if error:
            error_messages = {
                "all_keys_unavailable": ("–®–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", 503),
                "key_blocked": ("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å", 429),
                "max_retries_exceeded": ("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", 503),
                "proxy_unavailable": ("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", 503),
                "empty_message": ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 400),
                "empty_response": ("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", 500),
                "safety_block": ("–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", 400),
                "invalid_request": ("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", 400)
            }

            error_msg, status_code = error_messages.get(error, ("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", 500))
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error} - {error_msg}")

            return jsonify({
                'success': False,
                'error': error_msg
            }), status_code

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_manager.add_to_history(user_id, message if message else "[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]", response_text)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_manager.update_stats(user_id)

        return jsonify({
            'success': True,
            'response': response_text,
            'user_id': user_id
        })

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ chat_endpoint: {e}", exc_info=True)
        return jsonify({
            'success': False,
            'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500


@chat_bp.route('/chat/settings', methods=['GET', 'POST'])
def chat_settings():
    """API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        user_id = None

        if request.method == 'GET':
            user_id = request.args.get('user_id') or request.args.get('telegram_user_id')
        else:  # POST
            if request.is_json:
                data = request.get_json(force=True) or {}
                user_id = data.get('user_id') or data.get('telegram_user_id')
            elif request.form:
                user_id = request.form.get('user_id') or request.form.get('telegram_user_id')
            else:
                try:
                    data = request.get_json(force=True, silent=True) or {}
                    user_id = data.get('user_id') or data.get('telegram_user_id')
                except:
                    pass

        if not user_id:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω user_id –∏–ª–∏ telegram_user_id'
            }), 400

        if request.method == 'GET':
            settings = user_manager.get_user_settings(user_id)
            return jsonify({
                'success': True,
                'settings': settings,
                'user_id': user_id
            })

        elif request.method == 'POST':
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if request.is_json:
                data = request.get_json(force=True) or {}
            elif request.form:
                data = dict(request.form)
            else:
                try:
                    data = request.get_json(force=True, silent=True) or {}
                except:
                    data = {}

            new_settings = {
                'use_google_search': data.get('use_google_search', True),
                'use_url_context': data.get('use_url_context', True),
                'use_persona': data.get('use_persona', True)
            }

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ boolean –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            for key in new_settings:
                if isinstance(new_settings[key], str):
                    new_settings[key] = new_settings[key].lower() in ['true', '1', 'yes', 'on']

            user_manager.update_user_settings(user_id, new_settings)

            return jsonify({
                'success': True,
                'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                'settings': new_settings,
                'user_id': user_id
            })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ chat_settings: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏'
        }), 500


@chat_bp.route('/chat/history', methods=['GET'])
def chat_history():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        user_id = request.args.get('user_id') or request.args.get('telegram_user_id')
        limit = int(request.args.get('limit', 10))

        if not user_id:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω user_id –∏–ª–∏ telegram_user_id'
            }), 400

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è API (–Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é)
        raw_history = user_manager.get_user_history(user_id, limit)

        # –ù–æ —Ç–∞–∫–∂–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        gemini_history = user_manager.get_gemini_formatted_history(user_id, limit)

        return jsonify({
            'success': True,
            'history': raw_history,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            'gemini_history': gemini_history,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            'count': len(raw_history),
            'user_id': user_id
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏'
        }), 500


@chat_bp.route('/chat/clear', methods=['POST'])
@chat_bp.route('/chat/history/clear', methods=['POST'])  # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
def clear_chat():
    """API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        user_id = None

        if request.is_json:
            data = request.get_json(force=True) or {}
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            user_id = data.get('user_id') or data.get('telegram_user_id')
        elif request.form:
            user_id = request.form.get('user_id') or request.form.get('telegram_user_id')
        else:
            try:
                data = request.get_json(force=True, silent=True) or {}
                user_id = data.get('user_id') or data.get('telegram_user_id')
            except:
                import json
                try:
                    raw_data = request.get_data(as_text=True)
                    if raw_data:
                        data = json.loads(raw_data)
                        user_id = data.get('user_id') or data.get('telegram_user_id')
                except:
                    pass

        if not user_id:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω user_id –∏–ª–∏ telegram_user_id'
            }), 400

        user_manager.clear_user_history(user_id)

        return jsonify({
            'success': True,
            'message': '–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞',
            'user_id': user_id
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏'
        }), 500


@chat_bp.route('/chat/status')
def chat_status():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞"""
    try:
        keys_status = key_manager.get_keys_status()
        proxy_stats = proxy_manager.get_proxy_stats()
        
        is_available = not keys_status['all_keys_unavailable'] and (
            proxy_stats['available_proxies'] > 0 or 
            proxy_stats.get('direct_connection_enabled', True)
        )
        
        return jsonify({
            'success': True,
            'status': {
                'available': is_available,
                'keys_available': keys_status['available_keys'],
                'total_keys': keys_status['total_keys'],
                'proxies_available': proxy_stats['available_proxies'],
                'total_proxies': proxy_stats['total_proxies'],
                'direct_connection': proxy_stats.get('direct_connection_enabled', True)
            }
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
        }), 500
